{"version":3,"sources":["assets/CalvinUniv-vert-full-color-inverse.png","utilities/interfaces/dataInterfaces.ts","utilities/helpers/readCSV.ts","utilities/services/context.ts","components/Header/ImportButton/ImportButton.tsx","components/Header/Header/Header.tsx","utilities/helpers/writeCSV.ts","components/reuseables/Calendar/Calendar.tsx","components/reuseables/GridItem/GridItemCheckboxGroup/GridItemCheckboxGroup.tsx","components/reuseables/GridItem/GridItemRadioGroup/GridItemRadioGroup.tsx","components/reuseables/GridItem/GridItemTextField/GridItemTextField.tsx","components/reuseables/AddSectionPopover/AddSectionPopover.tsx","components/Toolbar/ColorSelector/ColorSelector.tsx","components/Toolbar/AddSectionButton/AddSectionButton.tsx","components/Toolbar/Searchbar/Searchbar.tsx","components/Toolbar/SemesterSelector/SemesterSelector.tsx","components/Toolbar/ScheduleToolbar/ScheduleToolbar.tsx","components/Tabs/FacultySchedule/FacultySchedule.tsx","components/Tabs/Tabs.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Term","SemesterLength","Day","Half","Intensive","SemesterLengthOption","HalfFirst","HalfSecond","IntensiveA","IntensiveB","IntensiveC","IntensiveD","validFields","timeReg","RegExp","amReg","pmReg","fallReg","summerReg","springReg","interimReg","firstReg","secondReg","fullReg","sunReg","monReg","tuesReg","wedReg","thursReg","friReg","satReg","csvStringToSchedule","csvString","sss","duplicateFields","value","objects","papa","parse","header","skipEmptyLines","schedule","courses","data","fields","meta","usableFields","filter","field","includes","forEach","duplicate","d","slice","length","dd","splice","indexOf","object","meetings","anticipatedSize","comments","globalMax","instructors","letter","localMax","days","di","Monday","Wednesday","Friday","duration","location","building","roomCapacity","roomNumber","startTime","semesterLength","Full","term","Fall","year","Date","getFullYear","course","facultyHours","name","number","prefixes","sections","studentHours","firstMeeting","String","replace","split","Number","ampm","hourPart","numHourPart","minPart","regMatch","match","test","console","log","startTimeCase","roomParts","trim","join","locationCase","isInteger","Summer","Spring","Interim","termCase","upperValue","toUpperCase","semesterLengthCase","push","Sunday","Tuesday","Thursday","Saturday","daysCase","names","nameParts","firstName","lastName","instructorCase","section","existingCourse","c","every","p","ScheduleContext","createContext","setSchedule","ImportButton","useState","file","setFile","useContext","useEffect","read","FileReader","readAsBinaryString","onloadend","scheduleJSON","readCSV","result","InputLabel","className","htmlFor","Input","id","inputProps","accept","onChange","e","target","files","type","Header","popupState","usePopupState","popupId","variant","AppBar","position","Toolbar","IconButton","color","edge","bindTrigger","Menu","bindMenu","MenuItem","onClick","close","csvStr","instructorsStr","instructor","meeting","writeCSV","Typography","alt","src","logo","events","description","end","moment","add","format","extendedProps","department","professor","start","title","Calendar","allDaySlot","dayHeaderFormat","weekday","droppable","editable","headerToolbar","height","initialDate","initialView","nowIndicator","plugins","interactionPlugin","timeGridPlugin","selectable","slotMaxTime","slotMinTime","weekends","GridItemCheckboxGroup","label","options","register","Grid","item","xs","FormLabel","component","map","o","i","FormControlLabel","key","toLowerCase","control","Checkbox","defaultChecked","inputRef","defaultProps","undefined","GridItemRadioGroup","defaultValue","lowercase","ref","as","RadioGroup","Radio","GridItemTextField","textFieldProps","TextField","Weekday","ColorBy","AddSectionPopover","schema","shape","array","transform","day","useForm","resolver","yupResolver","handleSubmit","setSemesterLength","onSubmit","instructorName","semesterType","sl","First","Second","A","B","C","D","convertToSemesterLength","intensive","half","newSection","newCourse","prefix","container","spacing","multiline","rows","Object","values","h","Button","AddSectionButton","Add","Popover","bindPopover","anchorOrigin","horizontal","vertical","PaperProps","style","maxWidth","minWidth","transformOrigin","ColorSelector","Level","colorValue","setColorValue","Select","event","Room","Instructor","Prefix","Searchbar","Autocomplete","getOptionLabel","option","classes","renderInput","params","SemesterSelector","ChevronLeft","ChevronRight","ScheduleToolbar","professors","FacultySchedule","Stick","node","prof","index","hideAxis","StickyHeader","top","window","innerHeight","TabPanel","props","children","other","aria-labelledby","hidden","role","Box","Tabs","tabValue","setTabValue","Paper","centered","indicatorColor","newValue","textColor","Tab","App","Provider","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.f93159e7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CalvinUniv-vert-full-color-inverse.f8a88c5a.png\";","/* eslint-disable typescript-sort-keys/string-enum */\nexport enum Term {\n  Fall = \"FA\",\n  Interim = \"IN\", // TODO: Remove?\n  Spring = \"SP\",\n  Summer = \"SU\", // TODO: Is this a thing?\n}\n\nexport enum SemesterLength {\n  Full = \"Full\",\n  HalfFirst = \"First\",\n  HalfSecond = \"Second\",\n  IntensiveA = \"A\",\n  IntensiveB = \"B\",\n  IntensiveC = \"C\",\n  IntensiveD = \"D\",\n}\n\nexport enum Day {\n  Monday = \"M\",\n  Tuesday = \"T\",\n  Wednesday = \"W\",\n  Thursday = \"Th\",\n  Friday = \"F\",\n  Saturday = \"S\",\n  Sunday = \"Su\",\n}\n\nexport enum Half {\n  First = SemesterLength.HalfFirst,\n  Second = SemesterLength.HalfSecond,\n}\n\nexport enum Intensive {\n  A = SemesterLength.IntensiveA,\n  B = SemesterLength.IntensiveB,\n  C = SemesterLength.IntensiveC,\n  D = SemesterLength.IntensiveD,\n}\n\nexport enum SemesterLengthOption {\n  FullSemester = \"Full\",\n  HalfSemester = \"Half\",\n  IntensiveSemester = \"Intensive\",\n}\n\nexport interface Location {\n  building: string;\n  roomCapacity?: number;\n  roomNumber: string;\n}\n\nexport interface Meeting {\n  // All days on which the given Meeting time and room is applicable\n  days: Day[];\n  // In minutes (usually 50)\n  duration: number;\n  location: Location;\n  // Like \"8:00AM\" or \"12:30PM\"\n  startTime: string;\n}\n\nexport interface Instructor {\n  firstName: string;\n  lastName: string;\n}\n\nexport interface Course {\n  facultyHours: number;\n  name: string;\n  number: string;\n  prefixes: string[];\n  sections: Section[];\n  studentHours: number;\n}\n\nexport interface Section {\n  anticipatedSize: number;\n  comments: string;\n  // Overrides Course value\n  facultyHours?: number;\n  globalMax: number;\n  instructors: Instructor[];\n  letter: string;\n  localMax: number;\n  // Multiple Meetings possible if time/room differs on different days\n  // Asynchronous classes should have an empty array of meeting times\n  meetings: Meeting[];\n  semesterLength: SemesterLength;\n  // Overrides Course value\n  studentHours?: number;\n  term: Term;\n  year: number | string;\n}\n\nexport interface Schedule {\n  courses: Course[];\n}\n","import papa from \"papaparse\";\nimport * as di from \"../interfaces/dataInterfaces\";\n\n// For now the plan is to assume the CSV has these proper headers\nconst validFields = [\n  \"name\",\n  // If both are found, use \"prefixes\"\n  \"prefix\",\n  \"prefixes\",\n  \"number\",\n  // Corresponds to letter\n  \"section\",\n  \"studentHours\",\n  \"facultyHours\",\n  // If both are found, use \"startTimeStr\"\n  \"startTime\",\n  \"startTimeStr\",\n  \"duration\",\n  // Covers both building and room number\n  \"location\",\n  \"roomCapacity\",\n  \"year\",\n  \"term\",\n  // If both are found, use \"semesterLength\"\n  \"half\",\n  \"semesterLength\",\n  // Needs to be parsed\n  \"days\",\n  \"globalMax\",\n  \"localMax\",\n  \"anticipatedSize\",\n  // If both are found, use \"instructors\"\n  \"instructor\",\n  \"instructors\",\n  \"comments\",\n];\n\n// Define regexes for parsing\nconst timeReg = RegExp(\"(?<![1-9])(1[0-9]|2[0-3]|[0-9]):([0-5][0-9])\");\nconst amReg = RegExp(\"[Aa][Mm]\");\nconst pmReg = RegExp(\"[Pp][Mm]\");\nconst fallReg = RegExp(\"[Ff]\");\nconst summerReg = RegExp(\"[Ss][Uu]\");\nconst springReg = RegExp(\"[Ss]\");\n// \"W\" represents interim in Pruim's system it seems\nconst interimReg = RegExp(\"[Ii]|[Ww]\");\nconst firstReg = RegExp(\"[Ff]irst\");\nconst secondReg = RegExp(\"[Ss]econd\");\nconst fullReg = RegExp(\"[Ff]ull\");\nconst sunReg = RegExp(\"[Ss][Uu]|[Nn]\");\nconst monReg = RegExp(\"[Mm]\");\nconst tuesReg = RegExp(\"[Tt](?![Hh])\");\nconst wedReg = RegExp(\"[Ww]\");\nconst thursReg = RegExp(\"[Tt][Hh]|[Rr]\");\nconst friReg = RegExp(\"[Ff]\");\nconst satReg = RegExp(\"[Ss](?![Uu])\");\n\nconst startTimeCase = (value: string): string => {\n  let ampm = \"AM\";\n  let hourPart = \"8\";\n  let numHourPart = 8;\n  let minPart = \"00\";\n  const regMatch = value.match(timeReg);\n  if (regMatch != null && regMatch.length === 3) {\n    // Get the hour and minute values, store as number and strings\n    [, hourPart, minPart] = regMatch;\n    numHourPart = Number(hourPart);\n\n    // Handle high hour values\n    if (numHourPart > 11) {\n      if (numHourPart > 12) {\n        // If military time, convert to standard\n        numHourPart -= 12;\n        hourPart = String(numHourPart);\n      }\n      // Assume PM when 12:XX or military time\n      ampm = \"PM\";\n    }\n\n    // If hour is 0, assume military time of 12 AM\n    if (numHourPart === 0) {\n      hourPart = \"12\";\n      numHourPart = 12;\n    }\n\n    // Look to see whether AM or PM is specified explicitly\n    if (pmReg.test(value)) {\n      ampm = \"PM\";\n      if (amReg.test(value)) {\n        // eslint-disable-next-line no-console\n        console.log(`Time of \"${value}\" is labeled with AM and PM, defaulting to PM`);\n      }\n    } else if (amReg.test(value)) {\n      ampm = \"AM\";\n    }\n\n    // Piece the time together\n    return `${hourPart}:${minPart} ${ampm}`;\n  }\n  // eslint-disable-next-line no-console\n  console.log(`Time of \"${value}\" is unreadable, defaulting to 8:00 AM`);\n  return \"8:00 AM\";\n};\n\nconst locationCase = (value: string): string[] => {\n  const roomParts = value.trim().split(\" \");\n  if (roomParts.length === 1) {\n    // No room number given\n    return [roomParts[0], \"\"];\n  }\n  if (roomParts.length === 2) {\n    // Building and room number given\n    return roomParts;\n  }\n  // Too many room parts given, assume last part is room number and rest is building\n  return [roomParts.slice(0, -1).join(\" \"), roomParts.slice(-1)[0]];\n};\n\nconst termCase = (value: string): di.Term => {\n  if (fallReg.test(value)) {\n    return di.Term.Fall;\n  }\n  if (summerReg.test(value)) {\n    return di.Term.Summer;\n  }\n  if (springReg.test(value)) {\n    return di.Term.Spring;\n  }\n  if (interimReg.test(value)) {\n    return di.Term.Interim;\n  }\n  // eslint-disable-next-line no-console\n  console.log(`Term of \"${value}\" is unreadable, defaulting to Fall`);\n  return di.Term.Fall;\n};\n\nconst semesterLengthCase = (value: string): di.SemesterLength => {\n  if (firstReg.test(value)) {\n    return di.SemesterLength.HalfFirst;\n  }\n  if (secondReg.test(value)) {\n    return di.SemesterLength.HalfSecond;\n  }\n  if (fullReg.test(value)) {\n    return di.SemesterLength.Full;\n  }\n  const upperValue = value.toUpperCase();\n  if (upperValue === \"A\") {\n    return di.SemesterLength.IntensiveA;\n  }\n  if (upperValue === \"B\") {\n    return di.SemesterLength.IntensiveB;\n  }\n  if (upperValue === \"C\") {\n    return di.SemesterLength.IntensiveC;\n  }\n  if (upperValue === \"D\") {\n    return di.SemesterLength.IntensiveD;\n  }\n  // eslint-disable-next-line no-console\n  console.log(`Half of \"${value}\" is unreadable, defaulting to Full`);\n  return di.SemesterLength.Full;\n};\n\nconst daysCase = (value: string): di.Day[] => {\n  const days: di.Day[] = [];\n  if (sunReg.test(value)) {\n    days.push(di.Day.Sunday);\n  }\n  if (monReg.test(value)) {\n    days.push(di.Day.Monday);\n  }\n  if (tuesReg.test(value)) {\n    days.push(di.Day.Tuesday);\n  }\n  if (wedReg.test(value)) {\n    days.push(di.Day.Wednesday);\n  }\n  if (thursReg.test(value)) {\n    days.push(di.Day.Thursday);\n  }\n  if (friReg.test(value)) {\n    days.push(di.Day.Friday);\n  }\n  if (satReg.test(value)) {\n    days.push(di.Day.Saturday);\n  }\n  return days;\n};\n\nconst instructorCase = (value: string): di.Instructor[] => {\n  const names = value.split(/[;,]/);\n  const instructors: di.Instructor[] = [];\n  names.forEach((name) => {\n    const nameParts = name.trim().split(\" \");\n    if (nameParts.length === 1) {\n      // No last name given\n      instructors.push({\n        firstName: nameParts[0],\n        lastName: \"\",\n      });\n    } else if (nameParts.length === 2) {\n      // First and last given\n      instructors.push({\n        firstName: nameParts[0],\n        lastName: nameParts[1],\n      });\n    } else {\n      // Too many names given, assume first part is first name and rest is last name\n      instructors.push({\n        firstName: nameParts[0],\n        lastName: nameParts.slice(1).join(\" \"),\n      });\n    }\n  });\n  return instructors;\n};\n\nexport const csvStringToSchedule = (csvString: string): di.Schedule => {\n  const objects: papa.ParseResult<never> = papa.parse(csvString, {\n    header: true,\n    skipEmptyLines: true,\n  });\n\n  // Define variables for Schedule creation\n  let sss: di.Section;\n  const schedule: di.Schedule = {\n    courses: [],\n  };\n\n  // Get data and fields from the CSV\n  const { data, meta } = objects;\n  const { fields } = meta;\n\n  // From the CSV fields, take the ones which we recognize\n  let usableFields: string[] = [];\n  const duplicates = [\n    [\"prefix\", \"prefixes\"],\n    [\"startTime\", \"startTimeStr\"],\n    [\"half\", \"semesterLength\"],\n    [\"instructor\", \"instructors\"],\n  ];\n  if (fields) {\n    usableFields = fields.filter((field) => {\n      return validFields.includes(field);\n    });\n  }\n  // Remove the duplicate field names\n  // If both \"prefix\" and \"prefixes\" are present, ignore \"prefix\"\n  // If both \"startTime\" and \"startTimeStr\" are present, ignore \"startTime\"\n  // This is because Pruim's data has a timestamp in \"startTime\" (not our timezone)\n  // If both \"half\" and \"semesterLength\" are present, ignore \"semesterLength\"\n  // If both \"instructor\" and \"instructors\" are present, ignore \"instructor\"\n  let duplicateFields: string[];\n  duplicates.forEach((duplicate) => {\n    duplicateFields = duplicate.filter((d) => {\n      return usableFields.includes(d);\n    });\n    duplicateFields.slice(0, duplicateFields.length - 1).forEach((dd) => {\n      usableFields.splice(usableFields.indexOf(dd), 1);\n    });\n  });\n\n  // Parse each row of the CSV as an object\n  let value: string;\n  data.forEach((object) => {\n    // Reset defaults\n    sss = {\n      anticipatedSize: 30,\n      comments: \"\",\n      globalMax: 30,\n      instructors: [],\n      letter: \"\",\n      localMax: 30,\n      meetings: [\n        {\n          days: [di.Day.Monday, di.Day.Wednesday, di.Day.Friday],\n          duration: 50,\n          location: { building: \"\", roomCapacity: 30, roomNumber: \"\" },\n          startTime: \"8:00 AM\",\n        },\n      ],\n      semesterLength: di.SemesterLength.Full,\n      term: di.Term.Fall,\n      year: new Date().getFullYear(),\n    };\n\n    const { meetings } = sss;\n    const course: di.Course = {\n      facultyHours: 0,\n      name: \"\",\n      number: \"\",\n      prefixes: [],\n      sections: [],\n      studentHours: 0,\n    };\n    const firstMeeting = meetings[0];\n\n    // Iterate through the fields of the CSV, and parse their values for this object\n    usableFields.forEach((field) => {\n      value = String(object[field]);\n      switch (field) {\n        case \"name\": {\n          course.name = value;\n          break;\n        }\n        case \"prefixes\":\n        case \"prefix\": {\n          course.prefixes = value.replace(\" \", \"\").split(/[;,]/);\n          break;\n        }\n        case \"number\": {\n          course.number = value;\n          break;\n        }\n        case \"section\": {\n          sss.letter = value;\n          break;\n        }\n        case \"studentHours\": {\n          course.studentHours = Number(value);\n          break;\n        }\n        case \"facultyHours\": {\n          course.facultyHours = Number(value);\n          break;\n        }\n        case \"startTimeStr\":\n        case \"startTime\": {\n          firstMeeting.startTime = startTimeCase(value);\n          break;\n        }\n        case \"duration\": {\n          firstMeeting.duration = Number(value);\n          break;\n        }\n        case \"location\": {\n          [firstMeeting.location.building, firstMeeting.location.roomNumber] = locationCase(value);\n          break;\n        }\n        case \"roomCapacity\": {\n          firstMeeting.location.roomCapacity = Number(value);\n          break;\n        }\n        case \"year\": {\n          sss.year = Number.isInteger(Number(value)) ? Number(value) : value;\n          break;\n        }\n        case \"term\": {\n          sss.term = termCase(value);\n          break;\n        }\n        case \"semesterLength\":\n        case \"half\": {\n          sss.semesterLength = semesterLengthCase(value);\n          break;\n        }\n        case \"days\": {\n          firstMeeting.days = daysCase(value);\n          break;\n        }\n        case \"globalMax\": {\n          sss.globalMax = Number(value);\n          break;\n        }\n        case \"localMax\": {\n          sss.localMax = Number(value);\n          break;\n        }\n        case \"anticipatedSize\": {\n          sss.anticipatedSize = Number(value);\n          break;\n        }\n        case \"instructors\":\n        case \"instructor\": {\n          sss.instructors = instructorCase(value);\n          break;\n        }\n        case \"comments\": {\n          sss.comments = value;\n          break;\n        }\n        default: {\n          break;\n        }\n      }\n    });\n\n    // Check if the meeting is empty, and should be removed\n    if (firstMeeting.days === [] || firstMeeting.duration === 0) {\n      sss.meetings = [];\n    }\n\n    // Create a section for this row of the CSV, and add it to the schedule\n    const section: di.Section = {\n      // TODO: Allow for multiple meetings\n      ...sss,\n    };\n\n    // Check if there is already a course in the schedule with the same prefix and number\n    const existingCourse: di.Course[] = schedule.courses.filter((c) => {\n      return (\n        c.prefixes.every((p) => {\n          return course.prefixes.includes(p);\n        }) && c.number === course.number\n      );\n    });\n\n    // If there is, add the new section to that course\n    if (existingCourse.length > 0) {\n      schedule.courses[schedule.courses.indexOf(existingCourse[0])].sections.push(section);\n    }\n    // Otherwise, add the new course to the schedule\n    else {\n      course.sections.push(section);\n      schedule.courses.push(course);\n    }\n  });\n  return schedule;\n};\n","import { createContext } from \"react\";\nimport { Schedule } from \"../interfaces/dataInterfaces\";\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst voidFn = () => {};\n\ninterface ScheduleContext {\n  schedule: Schedule;\n  setSchedule: React.Dispatch<React.SetStateAction<Schedule>> | (() => void);\n}\n\n/* Used for containing the Schedule JSON object\n  manipulated by the web-app.\n*/\nexport const ScheduleContext = createContext<ScheduleContext>({\n  schedule: { courses: [] },\n  setSchedule: voidFn,\n});\n","import { Input, InputLabel } from \"@material-ui/core\";\nimport React, { ChangeEvent, useContext, useEffect, useState } from \"react\";\nimport * as readCSV from \"../../../utilities/helpers/readCSV\";\nimport { ScheduleContext } from \"../../../utilities/services/context\";\nimport \"./ImportButton.scss\";\n\nexport const ImportButton = () => {\n  const [file, setFile] = useState<Blob>();\n  const { setSchedule } = useContext(ScheduleContext);\n\n  useEffect(() => {\n    // https://stackoverflow.com/questions/5201317/read-the-contents-of-a-file-object\n    const read = new FileReader();\n    file && read.readAsBinaryString(file);\n\n    read.onloadend = () => {\n      const scheduleJSON = readCSV.csvStringToSchedule(String(read.result));\n      setSchedule(scheduleJSON);\n      // eslint-disable-next-line no-console\n      console.log(scheduleJSON);\n    };\n  }, [file, setSchedule]);\n\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    e.target.files && setFile(e.target.files[0]);\n  };\n\n  return (\n    <InputLabel className=\"import-label\" htmlFor=\"import-button\">\n      <Input\n        className=\"hidden\"\n        id=\"import-button\"\n        inputProps={{\n          accept: \".csv\",\n        }}\n        onChange={onInputChange}\n        type=\"file\"\n      />\n      Import CSV\n    </InputLabel>\n  );\n};\n","import { AppBar, IconButton, Menu, MenuItem, Toolbar, Typography } from \"@material-ui/core\";\nimport { Menu as MenuIcon } from \"@material-ui/icons\";\nimport { bindMenu, bindTrigger, usePopupState } from \"material-ui-popup-state/hooks\";\nimport React, { useContext } from \"react\";\nimport logo from \"../../../assets/CalvinUniv-vert-full-color-inverse.png\";\nimport { ImportButton } from \"../ImportButton\";\nimport * as writeCSV from \"../../../utilities/helpers/writeCSV\";\nimport { ScheduleContext } from \"../../../utilities/services/context\";\nimport \"./Header.scss\";\n\nexport const Header = () => {\n  const popupState = usePopupState({ popupId: \"menu\", variant: \"popover\" });\n  const { schedule } = useContext(ScheduleContext);\n\n  return (\n    <div className=\"header\">\n      <AppBar position=\"static\">\n        <Toolbar className=\"toolbar\">\n          <IconButton color=\"inherit\" edge=\"start\" {...bindTrigger(popupState)}>\n            <MenuIcon />\n          </IconButton>\n          <Menu {...bindMenu(popupState)}>\n            <MenuItem>\n              <ImportButton />\n            </MenuItem>\n            <MenuItem\n              onClick={() => {\n                // TODO: make an ExportButton component\n                popupState.close();\n                // eslint-disable-next-line no-console\n                console.log(writeCSV.scheduleToCSVString(schedule));\n              }}\n            >\n              Export CSV\n            </MenuItem>\n          </Menu>\n          <Typography variant=\"h6\">Course Schedulizer</Typography>\n          <img alt=\"Org Logo\" className=\"org-logo\" src={logo} />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n","import * as di from \"../interfaces/dataInterfaces\";\n\nexport const scheduleToCSVString = (schedule: di.Schedule): string => {\n  let csvStr =\n    \"name,prefixes,number,section,studentHours,facultyHours,startTime,duration,location,roomCapacity,year,term,semesterLength,days,globalMax,localMax,anticipatedSize,instructors,comments\";\n  schedule.courses.forEach((course) => {\n    course.sections.forEach((section) => {\n      // TODO: Instead of getting the first meeting, iterate through all meetings\n      // TODO: Be wary of commas in strings?\n      let instructorsStr = \"\";\n      section.instructors.forEach((instructor) => {\n        instructorsStr += `${instructor.firstName} ${instructor.lastName};`;\n      });\n      instructorsStr = instructorsStr.slice(0, -1);\n      const meeting = section.meetings ? section.meetings[0] : null;\n      csvStr += `\\n${course.name},${course.prefixes.join(\";\")},${course.number},${section.letter},${\n        section.studentHours ?? course.studentHours\n      },${section.facultyHours ?? course.facultyHours},${meeting ? meeting.startTime : \"\"},${\n        meeting ? meeting.duration : \"\"\n      },${meeting ? `${meeting.location.building} ${meeting.location.roomNumber}` : \"\"},${\n        meeting ? meeting.location.roomCapacity : \"\"\n      },${section.year},${section.term},${section.semesterLength},${\n        meeting ? meeting.days.join(\"\") : \"\"\n      },${section.globalMax},${section.localMax},${section.anticipatedSize},${instructorsStr},${\n        section.comments\n      },`;\n    });\n  });\n  return csvStr;\n};\n","/* eslint-disable sort-imports */\nimport FullCalendar, { EventInput } from \"@fullcalendar/react\";\nimport moment from \"moment\";\n\n// Plugins\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\n\nimport React from \"react\";\nimport \"./Calendar.scss\";\n\nexport const initialDate = \"2000-01-02\";\n// TODO: remove\nconst events: EventInput = [\n  {\n    description: \"Lecture\",\n    end: `${moment(initialDate).add(1, \"days\").format(\"YYYY-MM-DD\")}T11:30:00`,\n    extendedProps: {\n      department: \"CS\",\n      professor: \"VanderLinden\",\n    },\n    start: `${moment(initialDate).add(1, \"days\").format(\"YYYY-MM-DD\")}T10:30:00`,\n    title: \"CS262\",\n  },\n];\n\nexport const Calendar = () => {\n  return (\n    <>\n      <FullCalendar\n        allDaySlot={false}\n        dayHeaderFormat={{ weekday: \"short\" }}\n        droppable\n        editable\n        events={events}\n        headerToolbar={false}\n        height=\"auto\"\n        initialDate={initialDate}\n        initialView=\"timeGridWeek\"\n        nowIndicator={false}\n        plugins={[interactionPlugin, timeGridPlugin]}\n        selectable\n        slotMaxTime=\"22:00:00\"\n        slotMinTime=\"6:00:00\"\n        weekends={false}\n      />\n    </>\n  );\n};\n","import { Checkbox, FormControlLabel, FormLabel, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./GridItemCheckboxGroup.scss\";\n\nexport const GridItemCheckboxGroup = ({\n  label,\n  name,\n  options,\n  register,\n}: {\n  label: string;\n  name?: string;\n  options: string[];\n  register: ReturnType<typeof useForm>[\"register\"];\n}) => {\n  return (\n    <Grid item xs>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      {options.map((o, i) => {\n        return (\n          <FormControlLabel\n            key={o.toLowerCase()}\n            control={<Checkbox />}\n            defaultChecked={false}\n            inputRef={register}\n            label={o}\n            name={`${name || label.toLowerCase()}[${i}]`}\n            value={o}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridItemCheckboxGroup.defaultProps = {\n  name: undefined,\n};\n","import { FormControlLabel, FormLabel, Grid, Radio, RadioGroup } from \"@material-ui/core\";\nimport React, { ChangeEvent } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport \"./GridItemRadioGroup.scss\";\n\nexport const GridItemRadioGroup = ({\n  control,\n  defaultValue,\n  label,\n  lowercase,\n  name,\n  onChange,\n  options,\n  register,\n}: {\n  control: ReturnType<typeof useForm>[\"control\"];\n  defaultValue: string;\n  label: string;\n  lowercase?: boolean;\n  name?: string;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  options: string[];\n  register: ReturnType<typeof useForm>[\"register\"];\n}) => {\n  return (\n    <Grid item xs>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <Controller\n        ref={register}\n        as={RadioGroup}\n        control={control}\n        defaultValue={defaultValue}\n        name={name || label.toLowerCase()}\n      >\n        {options.map((o) => {\n          return (\n            <FormControlLabel\n              key={o.toLowerCase()}\n              control={<Radio onChange={onChange} />}\n              label={o}\n              value={lowercase ? o.toLowerCase() : o}\n            />\n          );\n        })}\n      </Controller>\n    </Grid>\n  );\n};\n\nGridItemRadioGroup.defaultProps = {\n  lowercase: false,\n  name: undefined,\n  onChange: undefined,\n};\n","import { Grid, StandardTextFieldProps, TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./GridItemTextField.scss\";\n\nexport const GridItemTextField = ({\n  label,\n  register,\n  textFieldProps,\n}: {\n  label: string;\n  register: ReturnType<typeof useForm>[\"register\"];\n  textFieldProps?: StandardTextFieldProps;\n}) => {\n  return (\n    <Grid item xs>\n      <TextField inputRef={register} label={label} name={label.toLowerCase()} {...textFieldProps} />\n    </Grid>\n  );\n};\n\nGridItemTextField.defaultProps = {\n  textFieldProps: undefined,\n};\n","import { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Grid, Typography } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { array, object } from \"yup\";\nimport {\n  Course,\n  Day,\n  Half,\n  Intensive,\n  Section,\n  SemesterLength,\n  SemesterLengthOption,\n  Term,\n} from \"../../../utilities/interfaces/dataInterfaces\";\nimport { GridItemCheckboxGroup } from \"../GridItem/GridItemCheckboxGroup\";\nimport { GridItemRadioGroup } from \"../GridItem/GridItemRadioGroup\";\nimport { GridItemTextField } from \"../GridItem/GridItemTextField\";\nimport \"./AddSectionPopover.scss\";\n\ninterface SectionInput {\n  anticipatedSize: string;\n  comments: string;\n  days: Day[];\n  duration: string;\n  facultyHours: string;\n  globalMax: string;\n  half: Half;\n  instructor: string;\n  intensive?: Intensive;\n  localMax: string;\n  location: string;\n  name: string;\n  number: string;\n  prefix: string;\n  section: string;\n  semesterLength: SemesterLengthOption;\n  startTime: string;\n  studentHours: string;\n  term: Term;\n}\n\nenum Weekday {\n  Monday = Day.Monday,\n  Tuesday = Day.Tuesday,\n  Wednesday = Day.Wednesday,\n  Thursday = Day.Thursday,\n  Friday = Day.Friday,\n}\n\nconst convertToSemesterLength = (sl: Half | Intensive | SemesterLengthOption): SemesterLength => {\n  switch (sl) {\n    case Half.First:\n      return SemesterLength.HalfFirst;\n    case Half.Second:\n      return SemesterLength.HalfSecond;\n    case Intensive.A:\n      return SemesterLength.IntensiveA;\n    case Intensive.B:\n      return SemesterLength.IntensiveB;\n    case Intensive.C:\n      return SemesterLength.IntensiveC;\n    case Intensive.D:\n      return SemesterLength.IntensiveD;\n    default:\n      return SemesterLength.Full;\n  }\n};\n\nexport const AddSectionPopover = () => {\n  const spacing = 4;\n\n  // remove false values from days array\n  const schema = object().shape({\n    days: array().transform((d) => {\n      return d.filter((day: boolean | string) => {\n        return day;\n      });\n    }),\n  });\n\n  const { register, handleSubmit, control } = useForm<SectionInput>({\n    resolver: yupResolver(schema),\n  });\n  const [semesterLength, setSemesterLength] = useState(\"full\");\n\n  const onSubmit = (data: SectionInput) => {\n    const instructorName = data.instructor.split(\" \");\n    const location = data.instructor.split(\" \");\n    const semesterType = convertToSemesterLength(\n      data.intensive || data.half || data.semesterLength,\n    );\n    const newSection: Section = {\n      anticipatedSize: Number(data.anticipatedSize),\n      comments: data.comments,\n      globalMax: Number(data.globalMax),\n      instructors: [{ firstName: instructorName[0], lastName: instructorName[1] }],\n      letter: data.section,\n      localMax: Number(data.localMax),\n      meetings: [\n        {\n          days: data.days,\n          duration: Number(data.duration),\n          location: {\n            building: location[0],\n            roomNumber: location[1],\n          },\n          startTime: data.startTime,\n        },\n      ],\n      semesterLength: semesterType,\n      term: data.term,\n      year: \"2021-2022\",\n    };\n\n    // TODO: Append section to previously existing course if a course has already been created\n    const newCourse: Course = {\n      facultyHours: Number(data.facultyHours),\n      name: data.name,\n      number: data.number,\n      prefixes: [data.prefix],\n      sections: [newSection],\n      studentHours: Number(data.studentHours),\n    };\n    // eslint-disable-next-line no-console\n    return console.log(newCourse);\n  };\n  const onSemesterLengthChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSemesterLength(e.target.value);\n  };\n\n  return (\n    <form className=\"popover-container\" onSubmit={handleSubmit(onSubmit)}>\n      <Typography className=\"title\" variant=\"h4\">\n        Add/Update Section\n      </Typography>\n      <Grid container spacing={spacing}>\n        {/* TODO: Allow for multiple prefixes */}\n        {/* TODO: Dropdown for courses already in system */}\n        <GridItemTextField label=\"Prefix\" register={register} />\n        <GridItemTextField label=\"Number\" register={register} />\n        <GridItemTextField label=\"Section\" register={register} />\n        <GridItemTextField label=\"Name\" register={register} />\n      </Grid>\n      <Grid container spacing={spacing}>\n        {/* TODO: Allow for multiple instructors */}\n        {/* TODO: Dropdown for instructors with option to add new one */}\n        <GridItemTextField label=\"Instructor\" register={register} />\n        {/* TODO: Room capacity? */}\n        {/* TODO: Dropdown for rooms with option to add new one */}\n        <GridItemTextField label=\"Location\" register={register} />\n        {/* TODO: Allow facultyHours and studentHours to be set separately for a section */}\n        <GridItemTextField\n          label=\"Faculty Hours\"\n          register={register}\n          textFieldProps={{ name: \"facultyHours\" }}\n        />\n        <GridItemTextField\n          label=\"Student Hours\"\n          register={register}\n          textFieldProps={{ name: \"studentHours\" }}\n        />\n      </Grid>\n      <Grid container spacing={spacing}>\n        <GridItemTextField\n          label=\"Anticipated Size\"\n          register={register}\n          textFieldProps={{ multiline: true, name: \"anticipatedSize\", rows: 2 }}\n        />\n        <GridItemTextField\n          label=\"Global Max\"\n          register={register}\n          textFieldProps={{ name: \"globalMax\" }}\n        />\n        <GridItemTextField\n          label=\"Local Max\"\n          register={register}\n          textFieldProps={{ name: \"localMax\" }}\n        />\n        <GridItemTextField label=\"Duration\" register={register} />\n        <GridItemTextField\n          label=\"Start Time\"\n          register={register}\n          textFieldProps={{ defaultValue: \"08:00\", name: \"startTime\", type: \"time\" }}\n        />\n      </Grid>\n      <Grid container spacing={spacing}>\n        <GridItemCheckboxGroup\n          label=\"Days\"\n          options={Object.values(Day).filter((day) => {\n            return Object.values(Weekday).includes(day);\n          })}\n          register={register}\n        />\n        <GridItemRadioGroup\n          control={control}\n          defaultValue=\"FA\"\n          label=\"Term\"\n          options={Object.values(Term)}\n          register={register}\n        />\n        <GridItemRadioGroup\n          control={control}\n          defaultValue=\"full\"\n          label=\"Semester Length\"\n          lowercase\n          name=\"semesterLength\"\n          onChange={onSemesterLengthChange}\n          options={Object.values(SemesterLengthOption)}\n          register={register}\n        />\n        {semesterLength === \"half\" && (\n          <GridItemRadioGroup\n            control={control}\n            defaultValue=\"First\"\n            label=\"Half Semester\"\n            lowercase\n            name=\"half\"\n            options={Object.values(SemesterLength).filter((h) => {\n              return Object.values(Half).includes(h);\n            })}\n            register={register}\n          />\n        )}\n        {semesterLength === \"intensive\" && (\n          <GridItemRadioGroup\n            control={control}\n            defaultValue=\"A\"\n            label=\"Intensive Semester\"\n            name=\"intensive\"\n            options={Object.values(SemesterLength).filter((i) => {\n              return Object.values(Intensive).includes(i);\n            })}\n            register={register}\n          />\n        )}\n        <GridItemTextField\n          label=\"Notes\"\n          register={register}\n          textFieldProps={{ multiline: true, name: \"comments\", rows: 4 }}\n        />\n      </Grid>\n      <Grid container>\n        <Grid item xs>\n          <Button color=\"primary\" type=\"submit\" variant=\"contained\">\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n","import { InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport \"./ColorSelector.scss\";\n\nenum ColorBy {\n  Level,\n  Room,\n  Instructor,\n  Prefix,\n}\n\nexport const ColorSelector = () => {\n  const [colorValue, setColorValue] = useState(ColorBy.Level);\n\n  const handleColorChange = (event: ChangeEvent<{ value: unknown }>) => {\n    setColorValue(event.target.value as ColorBy);\n  };\n\n  return (\n    <div>\n      <InputLabel id=\"label\">Color By</InputLabel>\n      <Select id=\"color-select\" onChange={handleColorChange} value={colorValue}>\n        <MenuItem value={ColorBy.Level}>Level</MenuItem>\n        <MenuItem value={ColorBy.Room}>Room</MenuItem>\n        <MenuItem value={ColorBy.Instructor}>Instructor</MenuItem>\n        <MenuItem value={ColorBy.Prefix}>Prefix</MenuItem>\n      </Select>\n    </div>\n  );\n};\n","import { IconButton, Popover } from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\nimport { bindPopover, bindTrigger, usePopupState } from \"material-ui-popup-state/hooks\";\nimport React from \"react\";\nimport { AddSectionPopover } from \"../../reuseables/AddSectionPopover\";\nimport \"./AddSectionButton.scss\";\n\nexport const AddSectionButton = () => {\n  const popupState = usePopupState({\n    popupId: \"addSection\",\n    variant: \"popover\",\n  });\n\n  return (\n    <>\n      <IconButton {...bindTrigger(popupState)}>\n        <Add />\n      </IconButton>\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          horizontal: \"left\",\n          vertical: \"bottom\",\n        }}\n        PaperProps={{ style: { maxWidth: \"50%\", minWidth: \"500px\" } }}\n        transformOrigin={{\n          horizontal: \"right\",\n          vertical: \"top\",\n        }}\n      >\n        <AddSectionPopover />\n      </Popover>\n    </>\n  );\n};\n","import { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React from \"react\";\nimport \"./Searchbar.scss\";\n\nexport const Searchbar = () => {\n  return (\n    <Autocomplete\n      className=\"searchbar\"\n      getOptionLabel={(option) => {\n        return `${option.name}-${option.section}`;\n      }}\n      id=\"combo-box-demo\"\n      options={classes}\n      renderInput={(params) => {\n        return <TextField {...params} label=\"Search\" variant=\"outlined\" />;\n      }}\n    />\n  );\n};\n\nconst classes = [\n  { instructor: \"Victor T. Norman\", name: \"CS-108\", section: \"A\" },\n  { instructor: \"Victor T. Norman\", name: \"CS-108\", section: \"B\" },\n  { instructor: \"Joel Adams\", name: \"CS-112\", section: \"A\" },\n];\n","import { IconButton, Typography } from \"@material-ui/core\";\nimport { ChevronLeft, ChevronRight } from \"@material-ui/icons\";\nimport React from \"react\";\nimport \"./SemesterSelector.scss\";\n\nexport const SemesterSelector = () => {\n  return (\n    <div className=\"semester-selector\">\n      <IconButton>\n        <ChevronLeft />\n      </IconButton>\n      <Typography variant=\"h6\">Fall 2021</Typography>\n      <IconButton>\n        <ChevronRight />\n      </IconButton>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { AddSectionButton } from \"../AddSectionButton\";\nimport { ColorSelector } from \"../ColorSelector/ColorSelector\";\nimport { Searchbar } from \"../Searchbar\";\nimport { SemesterSelector } from \"../SemesterSelector\";\nimport \"./ScheduleToolbar.scss\";\n\nexport const ScheduleToolbar = () => {\n  return (\n    <div className=\"schedule-toolbar\">\n      <div className=\"toolbar-left\">\n        <Searchbar />\n        <ColorSelector />\n      </div>\n      <div className=\"toolbar-right\">\n        <SemesterSelector />\n        <AddSectionButton />\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport StickyNode from \"react-stickynode\";\nimport Stick from \"react-stick\";\nimport { Calendar } from \"../../reuseables/Calendar\";\nimport { ScheduleToolbar } from \"../../Toolbar/ScheduleToolbar\";\nimport \"./FacultySchedule.scss\";\n\n// TODO: remove this\nconst professors = [\n  \"Norman\",\n  \"Adams\",\n  \"VanderLinden\",\n  \"Arnold\",\n  \"Bailey\",\n  \"Schuurman\",\n  \"Plantinga\",\n];\n\n/* Creates a list of Calendars to create the Faculty Schedule\n  <Stick> is used to stick the Schedule Header to the Schedule\n  to track horizontal scrolling.\n*/\nexport const FacultySchedule = () => {\n  return (\n    <>\n      <ScheduleToolbar />\n      <div className=\"schedule-wrapper\">\n        <Stick node={<StickyHeader />} position=\"top left\">\n          <div className=\"adjacent\">\n            {professors.map((prof, index) => {\n              const hideAxis = index !== 0 ? \"hide-axis\" : \"\";\n\n              return (\n                // {/* TODO: Fix this because the first calendar is smaller */}\n                <div key={prof} className={`calendar-width ${hideAxis}`}>\n                  <Calendar key={prof} />\n                </div>\n              );\n            })}\n          </div>\n        </Stick>\n      </div>\n    </>\n  );\n};\n\n/*\n  StickyHeader is used to keep the Schedule header sticky to the\n  top of the view port.\n*/\n// TODO: Make into reusable component for future room schedule\nconst StickyHeader = () => {\n  return (\n    <StickyNode top={window.innerHeight / 10}>\n      <div className=\"adjacent schedule-header-row\">\n        {professors.map((prof) => {\n          return (\n            <div key={prof} className=\"calendar-width calendar-title\">\n              {prof}\n            </div>\n          );\n        })}\n      </div>\n    </StickyNode>\n  );\n};\n","import { Box, Tabs as MUITabs, Paper, Tab, Typography } from \"@material-ui/core\";\nimport React, { ChangeEvent, PropsWithChildren, useState } from \"react\";\nimport { FacultySchedule } from \"./FacultySchedule\";\nimport { ScheduleToolbar } from \"../Toolbar/ScheduleToolbar\";\nimport \"./Tabs.scss\";\n\ninterface TabPanelProps {\n  index: number;\n  value: number;\n}\n\nconst TabPanel = (props: PropsWithChildren<TabPanelProps>) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      aria-labelledby={`simple-tab-${index}`}\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      role=\"tabpanel\"\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography component=\"div\">{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport const Tabs = () => {\n  const [tabValue, setTabValue] = useState(0);\n\n  const handleTabChange = (event: ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  return (\n    <Paper>\n      <MUITabs\n        centered\n        indicatorColor=\"primary\"\n        onChange={handleTabChange}\n        textColor=\"primary\"\n        value={tabValue}\n      >\n        <Tab label=\"Faculty Schedule\" />\n        <Tab label=\"Room Schedule\" />\n        <Tab label=\"Teaching Loads\" />\n        <Tab label=\"Conflicts\" />\n      </MUITabs>\n      <TabPanel index={0} value={tabValue}>\n        <FacultySchedule />\n      </TabPanel>\n      <TabPanel index={1} value={tabValue}>\n        <ScheduleToolbar />\n      </TabPanel>\n      <TabPanel index={2} value={tabValue}>\n        Item Three\n      </TabPanel>\n      <TabPanel index={3} value={tabValue}>\n        Item Four\n      </TabPanel>\n    </Paper>\n  );\n};\n","import React, { useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport { Tabs } from \"../Tabs\";\nimport \"./App.scss\";\nimport { ScheduleContext } from \"../../utilities/services/context\";\nimport { Schedule } from \"../../utilities/interfaces/dataInterfaces\";\n\nexport const App = () => {\n  const [schedule, setSchedule] = useState<Schedule>({ courses: [] });\n\n  return (\n    <div className=\"App\">\n      <ScheduleContext.Provider value={{ schedule, setSchedule }}>\n        <Header />\n        <Tabs />\n      </ScheduleContext.Provider>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}