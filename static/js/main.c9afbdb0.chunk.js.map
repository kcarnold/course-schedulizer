{"version":3,"sources":["assets/CalvinUniv-vert-full-color-inverse.png","utilities/interfaces/dataInterfaces.ts","utilities/helpers/caseFunctions.ts","utilities/helpers/readCSV.ts","utilities/interfaces/appInterfaces.ts","utilities/services/appContext.ts","components/Header/ImportButton/ImportButton.tsx","components/Header/ExportButton/ExportButton.tsx","utilities/helpers/writeCSV.ts","components/Header/Header/Header.tsx","components/reuseables/GridItem/GridItemCheckboxGroup/GridItemCheckboxGroup.tsx","components/reuseables/GridItem/GridItemRadioGroup/GridItemRadioGroup.tsx","components/reuseables/GridItem/GridItemTextField/GridItemTextField.tsx","components/reuseables/AddSectionPopover/AddSectionPopover.tsx","components/reuseables/AddSectionButton/AddSectionButton.tsx","components/Toolbar/ColorSelector/ColorSelector.tsx","components/Toolbar/Searchbar/Searchbar.tsx","components/Toolbar/SemesterSelector/SemesterSelector.tsx","components/Toolbar/ScheduleToolbar/ScheduleToolbar.tsx","components/reuseables/Calendar/Calendar.tsx","components/reuseables/Schedule/Schedule.tsx","utilities/services/schedule.ts","components/Tabs/FacultySchedule/FacultySchedule.tsx","components/reuseables/AsyncComponent/AsyncComponent.tsx","components/Tabs/FacultyLoads/FacultyLoads.tsx","components/Tabs/Tabs.tsx","utilities/services/facultySchedule.ts","utilities/services/appReducer.ts","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Term","SemesterLength","Day","Half","Intensive","SemesterLengthOption","HalfFirst","HalfSecond","IntensiveA","IntensiveB","IntensiveC","IntensiveD","fallReg","RegExp","summerReg","springReg","interimReg","sunReg","monReg","tuesReg","wedReg","thursReg","friReg","satReg","startTimeCase","value","firstMeeting","startTime","moment","isValid","locationCase","roomParts","trim","split","length","location","building","roomNumber","slice","join","termCase","section","test","term","di","Fall","Summer","Spring","Interim","console","log","semesterLengthCase","upperValue","toUpperCase","lowerValue","toLowerCase","semesterLength","Full","daysCase","days","push","Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday","instructorCase","instructors","map","instructor","prefixCase","course","prefixes","replace","nameCase","name","numberCase","number","letterCase","letter","globalMaxCase","globalMax","Number","isInteger","localMaxCase","localMax","anticipatedSizeCase","anticipatedSize","yearCase","year","studentHoursCase","studentHours","facultyHoursCase","facultyHours","durationCase","duration","endTime","startTimeMoment","endTimeMoment","diff","roomCapacityCase","roomCapacity","pruimSpreadsheetFields","cf","comments","half","prefix","startTimeStr","registrarSpreadsheetFields","AcademicYear","BuildingAndRoom","CourseNum","Faculty","FacultyLoad","GlobalMax","LocalMax","MeetingDays","MeetingStart","MeetingTime","MinimumCredits","RoomCapacity","SectionCode","SectionEndDate","sectionStart","startSectionDate","sectionLength","startMonth","month","includes","SectionStartDate","ShortTitle","SubjectCode","Used","callbacks","initialAppState","isLoading","professors","schedule","courses","voidFn","AppContext","createContext","appDispatch","appState","setIsLoading","ImportButton","useContext","InputLabel","className","htmlFor","Input","id","inputProps","accept","onChange","e","file","target","files","read","FileReader","readAsBinaryString","onloadend","scheduleJSON","csvString","objects","papa","parse","header","skipEmptyLines","data","fields","meta","forEach","object","meetings","Date","getFullYear","sections","field","String","existingCourse","filter","c","some","p","existingCourseIndex","indexOf","readCSV","result","isEqual","payload","type","ExportButton","onClick","download","csvStr","instructorsStr","meeting","writeCSV","Header","popupState","usePopupState","popupId","variant","AppBar","position","Toolbar","IconButton","color","edge","bindTrigger","Menu","anchorOrigin","horizontal","vertical","elevation","getContentAnchorEl","transformOrigin","bindMenu","MenuItem","Typography","alt","src","logo","GridItemCheckboxGroup","label","options","register","Grid","item","xs","FormLabel","component","o","i","FormControlLabel","key","control","Checkbox","defaultChecked","inputRef","defaultProps","undefined","GridItemRadioGroup","defaultValue","lowercase","ref","as","RadioGroup","Radio","GridItemTextField","textFieldProps","TextField","Weekday","AddSectionPopover","schema","shape","array","transform","d","day","useForm","resolver","yupResolver","handleSubmit","useState","setSemesterLength","onSubmit","semesterType","sl","First","Second","A","B","C","D","convertToSemesterLength","intensive","newSection","newCourse","container","spacing","multiline","rows","Object","values","h","Button","AddSectionButton","isIcon","Add","Popover","bindPopover","PaperProps","style","maxWidth","minWidth","ColorBy","ColorSelector","Level","colorValue","setColorValue","Select","event","Room","Instructor","Prefix","Searchbar","Autocomplete","getOptionLabel","option","classes","renderInput","params","SemesterSelector","ChevronLeft","ChevronRight","ScheduleToolbar","events","description","end","add","format","extendedProps","department","professor","start","title","Calendar","props","allDaySlot","dayHeaderFormat","weekday","droppable","editable","headerToolbar","height","initialDate","initialView","nowIndicator","plugins","interactionPlugin","timeGridPlugin","selectable","slotMaxTime","slotMinTime","weekends","Schedule","calendarHeaders","calendarOptions","times","Stick","node","headers","LeftTimeAxis","min","max","minHour","parseInt","maxHour","range","getHoursArr","time","tenVH","window","innerHeight","ScheduleHeader","top","FacultySchedule","AsyncComponent","children","updateRow","newRow","prevRow","sectionName","termName","termCourseSectionProp","termHoursProp","FacultyLoads","useMemo","newTableData","newFacultyRow","faculty","prevAddedFacultyRow","updateArgs","row","totalHours","fallHours","springHours","summerHours","sort","a","b","createTable","columns","accessor","tableInstance","useTable","getTableProps","getTableBodyProps","headerGroups","prepareRow","TableContainer","Paper","Table","TableHead","headerGroup","getHeaderGroupProps","column","TableCell","getHeaderProps","render","TableBody","getRowProps","cells","cell","getCellProps","TabPanel","index","other","aria-labelledby","hidden","role","Box","Tabs","tabValue","setTabValue","centered","indicatorColor","newValue","textColor","Tab","getProfs","professorsSet","Set","prof","reducer","state","action","App","useReducer","Provider","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c9afbdb0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/CalvinUniv-vert-full-color-inverse.f8a88c5a.png\";","/* eslint-disable typescript-sort-keys/string-enum */\nexport enum Term {\n  Fall = \"FA\",\n  Interim = \"IN\", // TODO: Remove?\n  Spring = \"SP\",\n  Summer = \"SU\", // TODO: Is this a thing?\n}\n\nexport enum SemesterLength {\n  Full = \"Full\",\n  HalfFirst = \"First\",\n  HalfSecond = \"Second\",\n  IntensiveA = \"A\",\n  IntensiveB = \"B\",\n  IntensiveC = \"C\",\n  IntensiveD = \"D\",\n}\n\nexport enum Day {\n  Monday = \"M\",\n  Tuesday = \"T\",\n  Wednesday = \"W\",\n  Thursday = \"Th\",\n  Friday = \"F\",\n  Saturday = \"S\",\n  Sunday = \"Su\",\n}\n\nexport enum Half {\n  First = SemesterLength.HalfFirst,\n  Second = SemesterLength.HalfSecond,\n}\n\nexport enum Intensive {\n  A = SemesterLength.IntensiveA,\n  B = SemesterLength.IntensiveB,\n  C = SemesterLength.IntensiveC,\n  D = SemesterLength.IntensiveD,\n}\n\nexport enum SemesterLengthOption {\n  FullSemester = \"Full\",\n  HalfSemester = \"Half\",\n  IntensiveSemester = \"Intensive\",\n}\n\nexport interface Location {\n  building: string;\n  roomCapacity?: number;\n  roomNumber: string;\n}\n\nexport interface Meeting {\n  // All days on which the given Meeting time and room is applicable\n  days: Day[];\n  // In minutes (usually 50)\n  duration: number;\n  location: Location;\n  // Like \"8:00AM\" or \"12:30PM\"\n  startTime: string;\n}\n\nexport interface Course {\n  facultyHours: number;\n  name: string;\n  number: string;\n  prefixes: string[];\n  sections: Section[];\n  studentHours: number;\n}\n\nexport interface Section {\n  anticipatedSize: number;\n  comments: string;\n  // Overrides Course value\n  facultyHours?: number;\n  globalMax: number;\n  instructors: string[];\n  letter: string;\n  localMax: number;\n  // Multiple Meetings possible if time/room differs on different days\n  // Asynchronous classes should have an empty array of meeting times\n  meetings: Meeting[];\n  semesterLength: SemesterLength;\n  startSectionDate?: string;\n  // Overrides Course value\n  studentHours?: number;\n  term: Term;\n  year: number | string;\n}\n\nexport interface Schedule {\n  courses: Course[];\n}\n","import moment from \"moment\";\nimport * as di from \"../interfaces/dataInterfaces\";\n\nexport interface CaseCallbackParams {\n  course: di.Course;\n  firstMeeting: di.Meeting;\n  section: di.Section;\n}\n\n// Define regexes for parsing\n// const timeReg = RegExp(\"(?<![1-9])(1[0-9]|2[0-3]|[0-9]):([0-5][0-9])\");\n// const amReg = RegExp(\"[Aa][Mm]\");\n// const pmReg = RegExp(\"[Pp][Mm]\");\nconst fallReg = RegExp(\"[Ff]\");\nconst summerReg = RegExp(\"[Ss][Uu]|[Mm][Aa]\");\nconst springReg = RegExp(\"[Ss](?![Uu])\");\n// \"W\" represents interim in Pruim's system it seems\nconst interimReg = RegExp(\"[Ii]|[Ww]\");\nconst sunReg = RegExp(\"[Ss][Uu]|[Nn]\");\nconst monReg = RegExp(\"[Mm]\");\nconst tuesReg = RegExp(\"[Tt](?![Hh])\");\nconst wedReg = RegExp(\"[Ww]\");\nconst thursReg = RegExp(\"[Tt][Hh]|[Rr]\");\nconst friReg = RegExp(\"[Ff]\");\nconst satReg = RegExp(\"[Ss](?![Uu])\");\n\nexport const startTimeCase = (value: string, { firstMeeting }: CaseCallbackParams) => {\n  firstMeeting.startTime = moment(value, \"h:mma\").isValid() ? value : \"\";\n};\n\nexport const locationCase = (value: string, { firstMeeting }: CaseCallbackParams) => {\n  const roomParts = value.trim().split(\" \");\n  if (roomParts.length === 1) {\n    // No room number given\n    [firstMeeting.location.building, firstMeeting.location.roomNumber] = [roomParts[0], \"\"];\n  }\n  if (roomParts.length === 2) {\n    // Building and room number given\n    [firstMeeting.location.building, firstMeeting.location.roomNumber] = roomParts;\n  }\n  // Too many room parts given, assume last part is room number and rest is building\n  [firstMeeting.location.building, firstMeeting.location.roomNumber] = [\n    roomParts.slice(0, -1).join(\" \"),\n    roomParts.slice(-1)[0],\n  ];\n};\n\nexport const termCase = (value: string, { section }: CaseCallbackParams) => {\n  if (fallReg.test(value)) {\n    section.term = di.Term.Fall;\n  } else if (summerReg.test(value)) {\n    section.term = di.Term.Summer;\n  } else if (springReg.test(value)) {\n    section.term = di.Term.Spring;\n  } else if (interimReg.test(value)) {\n    section.term = di.Term.Interim;\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(`Term of \"${value}\" is unreadable, defaulting to Fall`);\n    section.term = di.Term.Fall;\n  }\n};\n\nexport const semesterLengthCase = (value: string, { section }: CaseCallbackParams) => {\n  const upperValue = value.toUpperCase();\n  const lowerValue = value.toLowerCase();\n  if (lowerValue === \"first\") {\n    section.semesterLength = di.SemesterLength.HalfFirst;\n  } else if (lowerValue === \"second\") {\n    section.semesterLength = di.SemesterLength.HalfSecond;\n  } else if (lowerValue === \"full\") {\n    section.semesterLength = di.SemesterLength.Full;\n  } else if (upperValue === \"A\") {\n    section.semesterLength = di.SemesterLength.IntensiveA;\n  } else if (upperValue === \"B\") {\n    section.semesterLength = di.SemesterLength.IntensiveB;\n  } else if (upperValue === \"C\") {\n    section.semesterLength = di.SemesterLength.IntensiveC;\n  } else if (upperValue === \"D\") {\n    section.semesterLength = di.SemesterLength.IntensiveD;\n  } else {\n    // eslint-disable-next-line no-console\n    console.log(`Semester Length of \"${value}\" is unreadable, defaulting to Full`);\n    section.semesterLength = di.SemesterLength.Full;\n  }\n};\n\nexport const daysCase = (value: string, { firstMeeting }: CaseCallbackParams) => {\n  if (sunReg.test(value)) {\n    firstMeeting.days.push(di.Day.Sunday);\n  }\n  if (monReg.test(value)) {\n    firstMeeting.days.push(di.Day.Monday);\n  }\n  if (tuesReg.test(value)) {\n    firstMeeting.days.push(di.Day.Tuesday);\n  }\n  if (wedReg.test(value)) {\n    firstMeeting.days.push(di.Day.Wednesday);\n  }\n  if (thursReg.test(value)) {\n    firstMeeting.days.push(di.Day.Thursday);\n  }\n  if (friReg.test(value)) {\n    firstMeeting.days.push(di.Day.Friday);\n  }\n  if (satReg.test(value)) {\n    firstMeeting.days.push(di.Day.Saturday);\n  }\n};\n\nexport const instructorCase = (value: string, { section }: CaseCallbackParams) => {\n  const instructors = value.split(/[;,\\n]/);\n  section.instructors = instructors.map((instructor) => {\n    return instructor.trim();\n  });\n};\n\nexport const sectionStartCase = (value: string, { section }: CaseCallbackParams) => {\n  section.startSectionDate = value;\n};\n\nexport const sectionEndCase = (value: string, { section }: CaseCallbackParams) => {\n  const sectionStart = moment(section.startSectionDate, \"l\");\n  const sectionEnd = moment(value, \"l\");\n  const sectionLength = sectionEnd.diff(sectionStart, \"days\");\n  const startMonth = sectionStart.month();\n  const firstStartMonths = [0, 1, 7, 8]; // Jan, Feb, Aug, Sept\n  if (sectionLength > 80) {\n    section.semesterLength = di.SemesterLength.Full;\n  } else if (sectionLength > 35 && sectionLength <= 80) {\n    section.semesterLength = firstStartMonths.includes(startMonth)\n      ? di.SemesterLength.HalfFirst\n      : di.SemesterLength.HalfSecond;\n  } else {\n    // TODO: Figure out if intensive is A, B, C, or D\n    section.semesterLength = di.SemesterLength.IntensiveA;\n  }\n};\n\nexport const prefixCase = (value: string, { course }: CaseCallbackParams) => {\n  course.prefixes = value.replace(\" \", \"\").split(/[;,]/);\n};\n\nexport const nameCase = (value: string, { course }: CaseCallbackParams) => {\n  course.name = value;\n};\n\nexport const numberCase = (value: string, { course }: CaseCallbackParams) => {\n  course.number = value;\n};\n\nexport const letterCase = (value: string, { section }: CaseCallbackParams) => {\n  section.letter = value;\n};\n\nexport const globalMaxCase = (value: string, { section }: CaseCallbackParams) => {\n  section.globalMax = Number.isInteger(Number(value)) ? Number(value) : 0;\n};\n\nexport const localMaxCase = (value: string, { section }: CaseCallbackParams) => {\n  section.localMax = Number.isInteger(Number(value)) ? Number(value) : 0;\n};\n\nexport const anticipatedSizeCase = (value: string, { section }: CaseCallbackParams) => {\n  section.anticipatedSize = Number.isInteger(Number(value)) ? Number(value) : 0;\n};\n\nexport const commentsCase = (value: string, { section }: CaseCallbackParams) => {\n  section.comments = value;\n};\n\nexport const yearCase = (value: string, { section }: CaseCallbackParams) => {\n  section.year = Number.isInteger(Number(value)) ? Number(value) : value;\n};\n\nexport const studentHoursCase = (value: string, { course }: CaseCallbackParams) => {\n  course.studentHours = Number.isInteger(Number(value)) ? Number(value) : 0;\n};\n\nexport const facultyHoursCase = (value: string, { course }: CaseCallbackParams) => {\n  course.facultyHours = Number.isInteger(Number(value)) ? Number(value) : 0;\n};\n\nexport const durationCase = (value: string, { firstMeeting }: CaseCallbackParams) => {\n  if (Number.isInteger(Number(value))) {\n    firstMeeting.duration = Number(value);\n  } else {\n    const [startTime, endTime] = value.split(\" \").join(\"\").split(\"-\");\n    const startTimeMoment = moment(startTime, \"h:mma\");\n    const endTimeMoment = moment(endTime, \"h:mma\");\n    firstMeeting.duration = endTimeMoment.diff(startTimeMoment, \"minutes\");\n  }\n};\n\nexport const roomCapacityCase = (value: string, { firstMeeting }: CaseCallbackParams) => {\n  firstMeeting.location.roomCapacity = Number.isInteger(Number(value)) ? Number(value) : 0;\n};\n","import papa from \"papaparse\";\nimport * as di from \"../interfaces/dataInterfaces\";\nimport * as cf from \"./caseFunctions\";\n\ninterface ValidFields {\n  [key: string]: (value: string, data: cf.CaseCallbackParams) => void;\n}\n\nconst pruimSpreadsheetFields: ValidFields = {\n  anticipatedSize: cf.anticipatedSizeCase,\n  comments: cf.commentsCase,\n  days: cf.daysCase,\n  duration: cf.durationCase,\n  facultyHours: cf.facultyHoursCase,\n  globalMax: cf.globalMaxCase,\n  half: cf.semesterLengthCase,\n  instructor: cf.instructorCase,\n  instructors: cf.instructorCase,\n  localMax: cf.localMaxCase,\n  location: cf.locationCase,\n  name: cf.nameCase,\n  number: cf.numberCase,\n  prefix: cf.prefixCase,\n  prefixes: cf.prefixCase,\n  roomCapacity: cf.roomCapacityCase,\n  section: cf.letterCase,\n  semesterLength: cf.semesterLengthCase,\n  startTime: cf.startTimeCase,\n  startTimeStr: cf.startTimeCase,\n  studentHours: cf.studentHoursCase,\n  term: cf.termCase,\n  year: cf.yearCase,\n};\n\n// TODO: parse duration and semester length\nconst registrarSpreadsheetFields: ValidFields = {\n  AcademicYear: cf.yearCase,\n  BuildingAndRoom: cf.locationCase,\n  CourseNum: cf.numberCase,\n  Faculty: cf.instructorCase,\n  FacultyLoad: cf.facultyHoursCase,\n  GlobalMax: cf.globalMaxCase,\n  LocalMax: cf.localMaxCase,\n  MeetingDays: cf.daysCase,\n  MeetingStart: cf.startTimeCase,\n  MeetingTime: cf.durationCase,\n  MinimumCredits: cf.studentHoursCase,\n  RoomCapacity: cf.roomCapacityCase,\n  SectionCode: cf.letterCase,\n  SectionEndDate: cf.sectionEndCase,\n  SectionStartDate: cf.sectionStartCase,\n  ShortTitle: cf.nameCase,\n  SubjectCode: cf.prefixCase,\n  Term: cf.termCase,\n  Used: cf.anticipatedSizeCase,\n};\n\nconst callbacks: ValidFields = {\n  ...pruimSpreadsheetFields,\n  ...registrarSpreadsheetFields,\n};\n\nexport const csvStringToSchedule = (csvString: string): di.Schedule => {\n  const objects: papa.ParseResult<never> = papa.parse(csvString, {\n    header: true,\n    skipEmptyLines: true,\n  });\n\n  // Define variables for Schedule creation\n  let section: di.Section;\n  const schedule: di.Schedule = {\n    courses: [],\n  };\n\n  // Get data and fields from the CSV\n  const { data, meta } = objects;\n  const { fields } = meta;\n\n  // Parse each row of the CSV as an object\n  data.forEach((object) => {\n    // Reset defaults\n    section = {\n      anticipatedSize: 0,\n      comments: \"\",\n      globalMax: 0,\n      instructors: [],\n      letter: \"\",\n      localMax: 0,\n      meetings: [\n        {\n          days: [],\n          duration: 0,\n          location: { building: \"\", roomCapacity: 0, roomNumber: \"\" },\n          startTime: \"\",\n        },\n      ],\n      semesterLength: di.SemesterLength.Full,\n      term: di.Term.Fall,\n      year: new Date().getFullYear(),\n    };\n\n    const { meetings } = section;\n    const course: di.Course = {\n      facultyHours: 0,\n      name: \"\",\n      number: \"\",\n      prefixes: [],\n      sections: [],\n      studentHours: 0,\n    };\n    const [firstMeeting] = meetings;\n\n    // Iterate through the fields of the CSV, and parse their values for this object\n    if (fields) {\n      fields.forEach((field) => {\n        const value = String(object[field]);\n        field = field.replace(/\\s/g, \"\");\n        if (field in callbacks) {\n          callbacks[field as keyof ValidFields](value, { course, firstMeeting, section });\n        }\n      });\n\n      // Check if the meeting is empty, and should be removed\n      if (firstMeeting.days === [] || firstMeeting.duration === 0) {\n        section.meetings = [];\n      }\n\n      // Check if there is already a course in the schedule with the same prefix and number\n      const existingCourse: di.Course[] = schedule.courses.filter((c) => {\n        return (\n          c.prefixes.some((p) => {\n            return course.prefixes.includes(p);\n          }) && c.number === course.number\n        );\n      });\n\n      // If there is, add the new section to that course\n      if (existingCourse.length > 0) {\n        const existingCourseIndex = schedule.courses.indexOf(existingCourse[0]);\n        schedule.courses[existingCourseIndex].sections.push(section);\n      }\n      // Otherwise, add the new course to the schedule\n      else {\n        course.sections.push(section);\n        schedule.courses.push(course);\n      }\n    }\n  });\n  return schedule;\n};\n","import { Schedule } from \"./dataInterfaces\";\n\n// structure for the global app state\nexport interface AppState {\n  isLoading: boolean;\n  professors: string[];\n  schedule: Schedule;\n}\n\n// Defaults for the app state when it launches\nexport const initialAppState = {\n  isLoading: false,\n  professors: [],\n  schedule: { courses: [] },\n};\n\n// structure of actions that can be sent to app dispatch\nexport interface AppAction {\n  payload: {\n    schedule: Schedule;\n  };\n  type: \"setScheduleData\"; // add | to add more actions in the future\n}\n","import { createContext, Dispatch, SetStateAction } from \"react\";\nimport { AppAction, AppState, initialAppState } from \"../interfaces/appInterfaces\";\n\n// eslint-disable-next-line @typescript-eslint/no-empty-function\nconst voidFn = () => {};\n\ninterface AppContext {\n  appDispatch: Dispatch<AppAction> | (() => void);\n  appState: AppState;\n  isLoading: boolean;\n  setIsLoading: Dispatch<SetStateAction<AppContext[\"isLoading\"]>> | (() => void);\n}\n\n/* Used for containing the global state of the app\n  and a dispatcher to perform updates against the\n  state of the app.\n*/\nexport const AppContext = createContext<AppContext>({\n  appDispatch: voidFn,\n  appState: initialAppState,\n  isLoading: false,\n  setIsLoading: voidFn,\n});\n","import { Input, InputLabel } from \"@material-ui/core\";\nimport React, { ChangeEvent, useContext } from \"react\";\nimport isEqual from \"lodash/isEqual\";\nimport * as readCSV from \"../../../utilities/helpers/readCSV\";\nimport { AppContext } from \"../../../utilities/services/appContext\";\n\nexport const ImportButton = () => {\n  const {\n    appState: { schedule },\n    appDispatch,\n    setIsLoading,\n  } = useContext(AppContext);\n\n  // TODO: this only runs when input changes, but if the same file\n  // is uploaded, this will not run.\n  // https://stackoverflow.com/questions/5201317/read-the-contents-of-a-file-object\n  const onInputChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setIsLoading(true);\n    const file: Blob | null = e.target.files && e.target.files[0];\n    const read = new FileReader();\n    file && read.readAsBinaryString(file);\n\n    read.onloadend = () => {\n      const scheduleJSON = readCSV.csvStringToSchedule(String(read.result));\n      // TODO: store in local storage incase prof navigates away while editing.\n      // currently a redundant check\n      if (!isEqual(schedule, scheduleJSON)) {\n        appDispatch({ payload: { schedule: scheduleJSON }, type: \"setScheduleData\" });\n      }\n      setIsLoading(false);\n    };\n  };\n\n  return (\n    <InputLabel className=\"import-label\" htmlFor=\"import-button\">\n      <Input\n        className=\"hidden\"\n        id=\"import-button\"\n        inputProps={{\n          accept: \".csv\",\n        }}\n        onChange={onInputChange}\n        type=\"file\"\n      />\n      Import CSV\n    </InputLabel>\n  );\n};\n","import { Input, InputLabel } from \"@material-ui/core\";\nimport React, { useContext } from \"react\";\nimport download from \"js-file-download\";\nimport * as writeCSV from \"../../../utilities/helpers/writeCSV\";\nimport { AppContext } from \"../../../utilities/services/appContext\";\n\nexport const ExportButton = () => {\n  const {\n    appState: { schedule },\n  } = useContext(AppContext);\n\n  const onExportClick = () => {\n    // TODO: maybe generate a cool title like schedule-fall-2020.csv\n    download(writeCSV.scheduleToCSVString(schedule), \"schedule.csv\");\n  };\n\n  return (\n    <InputLabel className=\"export-label\" htmlFor=\"export-button\">\n      <Input className=\"hidden\" id=\"export-button\" onClick={onExportClick} />\n      Export CSV\n    </InputLabel>\n  );\n};\n","import * as di from \"../interfaces/dataInterfaces\";\n\nexport const scheduleToCSVString = (schedule: di.Schedule): string => {\n  let csvStr =\n    \"name,prefixes,number,section,studentHours,facultyHours,startTime,duration,location,roomCapacity,year,term,semesterLength,days,globalMax,localMax,anticipatedSize,instructors,comments\";\n  schedule.courses.forEach((course) => {\n    course.sections.forEach((section) => {\n      // TODO: Instead of getting the first meeting, iterate through all meetings\n      // TODO: Be wary of commas in strings?\n      let instructorsStr = \"\";\n      section.instructors.forEach((instructor) => {\n        instructorsStr += `${instructor};`;\n      });\n      instructorsStr = instructorsStr.slice(0, -1);\n      const meeting = section.meetings ? section.meetings[0] : null;\n      csvStr += `\\n${course.name},${course.prefixes.join(\";\")},${course.number},${section.letter},${\n        section.studentHours ?? course.studentHours\n      },${section.facultyHours ?? course.facultyHours},${meeting ? meeting.startTime : \"\"},${\n        meeting ? meeting.duration : \"\"\n      },${meeting ? `${meeting.location.building} ${meeting.location.roomNumber}` : \"\"},${\n        meeting ? meeting.location.roomCapacity : \"\"\n      },${section.year},${section.term},${section.semesterLength},${\n        meeting ? meeting.days.join(\"\") : \"\"\n      },${section.globalMax},${section.localMax},${section.anticipatedSize},${instructorsStr},${\n        section.comments\n      },`;\n    });\n  });\n  return csvStr;\n};\n","import { AppBar, IconButton, Menu, MenuItem, Toolbar, Typography } from \"@material-ui/core\";\nimport { Menu as MenuIcon } from \"@material-ui/icons\";\nimport { bindMenu, bindTrigger, usePopupState } from \"material-ui-popup-state/hooks\";\nimport React from \"react\";\nimport logo from \"../../../assets/CalvinUniv-vert-full-color-inverse.png\";\nimport { ImportButton } from \"../ImportButton\";\nimport { ExportButton } from \"../ExportButton\";\nimport \"./Header.scss\";\n\nexport const Header = () => {\n  const popupState = usePopupState({ popupId: \"menu\", variant: \"popover\" });\n\n  return (\n    <div className=\"header\">\n      <AppBar position=\"static\">\n        <Toolbar className=\"toolbar\">\n          <IconButton color=\"inherit\" edge=\"start\" {...bindTrigger(popupState)}>\n            <MenuIcon />\n          </IconButton>\n          <Menu // Anchoring from: https://codesandbox.io/s/3rmgv?file=/demo.js:603-812\n            anchorOrigin={{\n              horizontal: \"right\",\n              vertical: \"top\",\n            }}\n            elevation={0}\n            getContentAnchorEl={null}\n            transformOrigin={{\n              horizontal: \"left\",\n              vertical: \"top\",\n            }}\n            {...bindMenu(popupState)}\n          >\n            <MenuItem className=\"import-menu-item\">\n              <ImportButton />\n            </MenuItem>\n            <MenuItem className=\"export-menu-item\">\n              <ExportButton />\n            </MenuItem>\n          </Menu>\n          <Typography variant=\"h6\">Course Schedulizer</Typography>\n          <img alt=\"Org Logo\" className=\"org-logo\" src={logo} />\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n};\n","import { Checkbox, FormControlLabel, FormLabel, Grid } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./GridItemCheckboxGroup.scss\";\n\nexport const GridItemCheckboxGroup = ({\n  label,\n  name,\n  options,\n  register,\n}: {\n  label: string;\n  name?: string;\n  options: string[];\n  register: ReturnType<typeof useForm>[\"register\"];\n}) => {\n  return (\n    <Grid item xs>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      {options.map((o, i) => {\n        return (\n          <FormControlLabel\n            key={o.toLowerCase()}\n            control={<Checkbox />}\n            defaultChecked={false}\n            inputRef={register}\n            label={o}\n            name={`${name || label.toLowerCase()}[${i}]`}\n            value={o}\n          />\n        );\n      })}\n    </Grid>\n  );\n};\n\nGridItemCheckboxGroup.defaultProps = {\n  name: undefined,\n};\n","import { FormControlLabel, FormLabel, Grid, Radio, RadioGroup } from \"@material-ui/core\";\nimport React, { ChangeEvent } from \"react\";\nimport { Controller, useForm } from \"react-hook-form\";\nimport \"./GridItemRadioGroup.scss\";\n\nexport const GridItemRadioGroup = ({\n  control,\n  defaultValue,\n  label,\n  lowercase,\n  name,\n  onChange,\n  options,\n  register,\n}: {\n  control: ReturnType<typeof useForm>[\"control\"];\n  defaultValue: string;\n  label: string;\n  lowercase?: boolean;\n  name?: string;\n  onChange?: (e: ChangeEvent<HTMLInputElement>) => void;\n  options: string[];\n  register: ReturnType<typeof useForm>[\"register\"];\n}) => {\n  return (\n    <Grid item xs>\n      <FormLabel component=\"legend\">{label}</FormLabel>\n      <Controller\n        ref={register}\n        as={RadioGroup}\n        control={control}\n        defaultValue={defaultValue}\n        name={name || label.toLowerCase()}\n      >\n        {options.map((o) => {\n          return (\n            <FormControlLabel\n              key={o.toLowerCase()}\n              control={<Radio onChange={onChange} />}\n              label={o}\n              value={lowercase ? o.toLowerCase() : o}\n            />\n          );\n        })}\n      </Controller>\n    </Grid>\n  );\n};\n\nGridItemRadioGroup.defaultProps = {\n  lowercase: false,\n  name: undefined,\n  onChange: undefined,\n};\n","import { Grid, StandardTextFieldProps, TextField } from \"@material-ui/core\";\nimport React from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport \"./GridItemTextField.scss\";\n\nexport const GridItemTextField = ({\n  label,\n  register,\n  textFieldProps,\n}: {\n  label: string;\n  register: ReturnType<typeof useForm>[\"register\"];\n  textFieldProps?: StandardTextFieldProps;\n}) => {\n  return (\n    <Grid item xs>\n      <TextField inputRef={register} label={label} name={label.toLowerCase()} {...textFieldProps} />\n    </Grid>\n  );\n};\n\nGridItemTextField.defaultProps = {\n  textFieldProps: undefined,\n};\n","import { yupResolver } from \"@hookform/resolvers/yup\";\nimport { Button, Grid, Typography } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { array, object } from \"yup\";\nimport {\n  Course,\n  Day,\n  Half,\n  Intensive,\n  Meeting,\n  Section,\n  SemesterLength,\n  SemesterLengthOption,\n  Term,\n} from \"../../../utilities/interfaces/dataInterfaces\";\nimport { GridItemCheckboxGroup } from \"../GridItem/GridItemCheckboxGroup\";\nimport { GridItemRadioGroup } from \"../GridItem/GridItemRadioGroup\";\nimport { GridItemTextField } from \"../GridItem/GridItemTextField\";\nimport \"./AddSectionPopover.scss\";\n\n// TODO: make all these dependent types. See comments and days\ninterface SectionInput {\n  anticipatedSize: string;\n  comments: Section[\"comments\"];\n  days: Meeting[\"days\"];\n  duration: string;\n  facultyHours: string;\n  globalMax: string;\n  half: Half;\n  instructor: string;\n  intensive?: Intensive;\n  localMax: string;\n  location: string;\n  name: string;\n  number: string;\n  prefix: string;\n  section: string;\n  semesterLength: SemesterLengthOption;\n  startTime: string;\n  studentHours: string;\n  term: Term;\n}\n\nenum Weekday {\n  Monday = Day.Monday,\n  Tuesday = Day.Tuesday,\n  Wednesday = Day.Wednesday,\n  Thursday = Day.Thursday,\n  Friday = Day.Friday,\n}\n\nconst convertToSemesterLength = (sl: Half | Intensive | SemesterLengthOption): SemesterLength => {\n  switch (sl) {\n    case Half.First:\n      return SemesterLength.HalfFirst;\n    case Half.Second:\n      return SemesterLength.HalfSecond;\n    case Intensive.A:\n      return SemesterLength.IntensiveA;\n    case Intensive.B:\n      return SemesterLength.IntensiveB;\n    case Intensive.C:\n      return SemesterLength.IntensiveC;\n    case Intensive.D:\n      return SemesterLength.IntensiveD;\n    default:\n      return SemesterLength.Full;\n  }\n};\n\nexport const AddSectionPopover = () => {\n  const spacing = 4;\n\n  // remove false values from days array\n  const schema = object().shape({\n    days: array().transform((d) => {\n      return d.filter((day: boolean | string) => {\n        return day;\n      });\n    }),\n  });\n\n  const { register, handleSubmit, control } = useForm<SectionInput>({\n    resolver: yupResolver(schema),\n  });\n  const [semesterLength, setSemesterLength] = useState(\"full\");\n\n  const onSubmit = (data: SectionInput) => {\n    const location = data.location.split(\" \");\n    const semesterType = convertToSemesterLength(\n      data.intensive || data.half || data.semesterLength,\n    );\n    const newSection: Section = {\n      anticipatedSize: Number(data.anticipatedSize),\n      comments: data.comments,\n      globalMax: Number(data.globalMax),\n      instructors: data.instructor.split(/[;,\\n]/),\n      letter: data.section,\n      localMax: Number(data.localMax),\n      meetings: [\n        {\n          days: data.days,\n          duration: Number(data.duration),\n          location: {\n            building: location[0],\n            roomNumber: location[1],\n          },\n          startTime: data.startTime,\n        },\n      ],\n      semesterLength: semesterType,\n      term: data.term,\n      year: \"2021-2022\",\n    };\n\n    // TODO: Append section to previously existing course if a course has already been created\n    const newCourse: Course = {\n      facultyHours: Number(data.facultyHours),\n      name: data.name,\n      number: data.number,\n      prefixes: [data.prefix],\n      sections: [newSection],\n      studentHours: Number(data.studentHours),\n    };\n    // eslint-disable-next-line no-console\n    return console.log(newCourse);\n  };\n  const onSemesterLengthChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setSemesterLength(e.target.value);\n  };\n\n  return (\n    <form className=\"popover-container\" onSubmit={handleSubmit(onSubmit)}>\n      <Typography className=\"title\" variant=\"h4\">\n        Add/Update Section\n      </Typography>\n      <Grid container spacing={spacing}>\n        {/* TODO: Allow for multiple prefixes */}\n        {/* TODO: Dropdown for courses already in system */}\n        <GridItemTextField label=\"Prefix\" register={register} />\n        <GridItemTextField label=\"Number\" register={register} />\n        <GridItemTextField label=\"Section\" register={register} />\n        <GridItemTextField label=\"Name\" register={register} />\n      </Grid>\n      <Grid container spacing={spacing}>\n        {/* TODO: Allow for multiple instructors */}\n        {/* TODO: Dropdown for instructors with option to add new one */}\n        <GridItemTextField label=\"Instructor\" register={register} />\n        {/* TODO: Room capacity? */}\n        {/* TODO: Dropdown for rooms with option to add new one */}\n        <GridItemTextField label=\"Location\" register={register} />\n        {/* TODO: Allow facultyHours and studentHours to be set separately for a section */}\n        <GridItemTextField\n          label=\"Faculty Hours\"\n          register={register}\n          textFieldProps={{ name: \"facultyHours\" }}\n        />\n        <GridItemTextField\n          label=\"Student Hours\"\n          register={register}\n          textFieldProps={{ name: \"studentHours\" }}\n        />\n      </Grid>\n      <Grid container spacing={spacing}>\n        <GridItemTextField\n          label=\"Anticipated Size\"\n          register={register}\n          textFieldProps={{ multiline: true, name: \"anticipatedSize\", rows: 2 }}\n        />\n        <GridItemTextField\n          label=\"Global Max\"\n          register={register}\n          textFieldProps={{ name: \"globalMax\" }}\n        />\n        <GridItemTextField\n          label=\"Local Max\"\n          register={register}\n          textFieldProps={{ name: \"localMax\" }}\n        />\n        <GridItemTextField label=\"Duration\" register={register} />\n        <GridItemTextField\n          label=\"Start Time\"\n          register={register}\n          textFieldProps={{ defaultValue: \"08:00\", name: \"startTime\", type: \"time\" }}\n        />\n      </Grid>\n      <Grid container spacing={spacing}>\n        <GridItemCheckboxGroup\n          label=\"Days\"\n          options={Object.values(Day).filter((day) => {\n            return Object.values(Weekday).includes(day);\n          })}\n          register={register}\n        />\n        <GridItemRadioGroup\n          control={control}\n          defaultValue=\"FA\"\n          label=\"Term\"\n          options={Object.values(Term)}\n          register={register}\n        />\n        <GridItemRadioGroup\n          control={control}\n          defaultValue=\"full\"\n          label=\"Semester Length\"\n          lowercase\n          name=\"semesterLength\"\n          onChange={onSemesterLengthChange}\n          options={Object.values(SemesterLengthOption)}\n          register={register}\n        />\n        {semesterLength === \"half\" && (\n          <GridItemRadioGroup\n            control={control}\n            defaultValue=\"First\"\n            label=\"Half Semester\"\n            lowercase\n            name=\"half\"\n            options={Object.values(SemesterLength).filter((h) => {\n              return Object.values(Half).includes(h);\n            })}\n            register={register}\n          />\n        )}\n        {semesterLength === \"intensive\" && (\n          <GridItemRadioGroup\n            control={control}\n            defaultValue=\"A\"\n            label=\"Intensive Semester\"\n            name=\"intensive\"\n            options={Object.values(SemesterLength).filter((i) => {\n              return Object.values(Intensive).includes(i);\n            })}\n            register={register}\n          />\n        )}\n        <GridItemTextField\n          label=\"Notes\"\n          register={register}\n          textFieldProps={{ multiline: true, name: \"comments\", rows: 4 }}\n        />\n      </Grid>\n      <Grid container>\n        <Grid item xs>\n          <Button color=\"primary\" type=\"submit\" variant=\"contained\">\n            Submit\n          </Button>\n        </Grid>\n      </Grid>\n    </form>\n  );\n};\n","import { Button, IconButton, Popover } from \"@material-ui/core\";\nimport { Add } from \"@material-ui/icons\";\nimport { bindPopover, bindTrigger, usePopupState } from \"material-ui-popup-state/hooks\";\nimport React from \"react\";\nimport { AddSectionPopover } from \"../AddSectionPopover\";\nimport \"./AddSectionButton.scss\";\n\ninterface AddSectionButton {\n  isIcon?: boolean;\n}\n\nexport const AddSectionButton = ({ isIcon }: AddSectionButton) => {\n  const popupState = usePopupState({\n    popupId: \"addSection\",\n    variant: \"popover\",\n  });\n\n  return (\n    <>\n      {isIcon ? (\n        <IconButton {...bindTrigger(popupState)}>\n          <Add />\n        </IconButton>\n      ) : (\n        <Button color=\"primary\" variant=\"contained\" {...bindTrigger(popupState)}>\n          Add Section\n        </Button>\n      )}\n      <Popover\n        {...bindPopover(popupState)}\n        anchorOrigin={{\n          horizontal: \"left\",\n          vertical: \"bottom\",\n        }}\n        PaperProps={{ style: { maxWidth: \"50%\", minWidth: \"500px\" } }}\n        transformOrigin={{\n          horizontal: \"right\",\n          vertical: \"top\",\n        }}\n      >\n        <AddSectionPopover />\n      </Popover>\n    </>\n  );\n};\n\nAddSectionButton.defaultProps = {\n  isIcon: true,\n};\n","import { InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport React, { ChangeEvent, useState } from \"react\";\nimport \"./ColorSelector.scss\";\n\nenum ColorBy {\n  Level,\n  Room,\n  Instructor,\n  Prefix,\n}\n\nexport const ColorSelector = () => {\n  const [colorValue, setColorValue] = useState(ColorBy.Level);\n\n  const handleColorChange = (event: ChangeEvent<{ value: unknown }>) => {\n    setColorValue(event.target.value as ColorBy);\n  };\n\n  return (\n    <div>\n      <InputLabel id=\"label\">Color By</InputLabel>\n      <Select id=\"color-select\" onChange={handleColorChange} value={colorValue}>\n        <MenuItem value={ColorBy.Level}>Level</MenuItem>\n        <MenuItem value={ColorBy.Room}>Room</MenuItem>\n        <MenuItem value={ColorBy.Instructor}>Instructor</MenuItem>\n        <MenuItem value={ColorBy.Prefix}>Prefix</MenuItem>\n      </Select>\n    </div>\n  );\n};\n","import { TextField } from \"@material-ui/core\";\nimport { Autocomplete } from \"@material-ui/lab\";\nimport React from \"react\";\nimport \"./Searchbar.scss\";\n\nexport const Searchbar = () => {\n  return (\n    <Autocomplete\n      className=\"searchbar\"\n      getOptionLabel={(option) => {\n        return `${option.name}-${option.section}`;\n      }}\n      id=\"combo-box-demo\"\n      options={classes}\n      renderInput={(params) => {\n        return <TextField {...params} label=\"Search\" variant=\"outlined\" />;\n      }}\n    />\n  );\n};\n\nconst classes = [\n  { instructor: \"Victor T. Norman\", name: \"CS-108\", section: \"A\" },\n  { instructor: \"Victor T. Norman\", name: \"CS-108\", section: \"B\" },\n  { instructor: \"Joel Adams\", name: \"CS-112\", section: \"A\" },\n];\n","import { IconButton, Typography } from \"@material-ui/core\";\nimport { ChevronLeft, ChevronRight } from \"@material-ui/icons\";\nimport React from \"react\";\nimport \"./SemesterSelector.scss\";\n\nexport const SemesterSelector = () => {\n  return (\n    <div className=\"semester-selector\">\n      <IconButton>\n        <ChevronLeft />\n      </IconButton>\n      <Typography variant=\"h6\">Fall 2021</Typography>\n      <IconButton>\n        <ChevronRight />\n      </IconButton>\n    </div>\n  );\n};\n","import React from \"react\";\nimport { AddSectionButton } from \"../../reuseables/AddSectionButton\";\nimport { ColorSelector } from \"../ColorSelector/ColorSelector\";\nimport { Searchbar } from \"../Searchbar\";\nimport { SemesterSelector } from \"../SemesterSelector\";\nimport \"./ScheduleToolbar.scss\";\n\nexport const ScheduleToolbar = () => {\n  return (\n    <div className=\"schedule-toolbar\">\n      <div className=\"toolbar-left\">\n        <Searchbar />\n        <ColorSelector />\n      </div>\n      <div className=\"toolbar-right\">\n        <SemesterSelector />\n        <AddSectionButton />\n      </div>\n    </div>\n  );\n};\n","/* eslint-disable sort-imports */\nimport FullCalendar, { EventInput } from \"@fullcalendar/react\";\nimport moment from \"moment\";\nimport { CalendarOptions } from \"@fullcalendar/common\";\n\n// Plugins\nimport interactionPlugin from \"@fullcalendar/interaction\"; // needed for dayClick\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\n\nimport React from \"react\";\nimport \"./Calendar.scss\";\n\nexport const initialDate = \"2000-01-02\";\n// TODO: remove\nconst events: EventInput = [\n  {\n    description: \"Lecture\",\n    end: `${moment(initialDate).add(1, \"days\").format(\"YYYY-MM-DD\")}T11:30:00`,\n    extendedProps: {\n      department: \"CS\",\n      professor: \"VanderLinden\",\n    },\n    start: `${moment(initialDate).add(1, \"days\").format(\"YYYY-MM-DD\")}T10:30:00`,\n    title: \"CS262\",\n  },\n];\n\nexport const Calendar = (props: CalendarOptions) => {\n  return (\n    <>\n      <FullCalendar {...props} />\n    </>\n  );\n};\n\nCalendar.defaultProps = {\n  allDaySlot: false,\n  dayHeaderFormat: { weekday: \"short\" },\n  droppable: true,\n  editable: true,\n  events,\n  headerToolbar: false,\n  height: \"auto\",\n  initialDate,\n  initialView: \"timeGridWeek\",\n  nowIndicator: false,\n  plugins: [interactionPlugin, timeGridPlugin],\n  selectable: true,\n  slotMaxTime: \"22:00:00\",\n  slotMinTime: \"6:00:00\",\n  weekends: false,\n};\n","import { CalendarOptions } from \"@fullcalendar/react\";\nimport React from \"react\";\nimport Stick from \"react-stick\";\nimport StickyNode from \"react-stickynode\";\nimport { getHoursArr } from \"../../../utilities/services/schedule\";\nimport { ScheduleToolbar } from \"../../Toolbar/ScheduleToolbar\";\nimport { Calendar } from \"../Calendar\";\nimport \"./Schedule.scss\";\n\ninterface Schedule extends CalendarOptions {\n  calendarHeaders: string[];\n}\n\n/* Creates a list of Calendars to create a Schedule\n  <Stick> is used to stick the Schedule Header to the Schedule\n  to track horizontal scrolling.\n*/\nexport const Schedule = ({ calendarHeaders, ...calendarOptions }: Schedule) => {\n  const times = {\n    slotMaxTime: calendarOptions.slotMaxTime as string,\n    slotMinTime: calendarOptions.slotMinTime as string,\n  };\n  return (\n    <>\n      <ScheduleToolbar />\n      <div className=\"schedule-time-axis-wrapper\">\n        <LeftTimeAxis {...times} />\n        <div className=\"schedule-wrapper\">\n          <Stick node={<ScheduleHeader headers={calendarHeaders} />} position=\"top left\">\n            <div className=\"adjacent\">\n              {calendarHeaders.map((header) => {\n                return (\n                  <div key={header} className=\"calendar-width hide-axis\">\n                    <Calendar {...calendarOptions} key={header} />\n                  </div>\n                );\n              })}\n            </div>\n          </Stick>\n        </div>\n      </div>\n    </>\n  );\n};\n\ninterface LeftTimeAxis {\n  slotMaxTime: string;\n  slotMinTime: string;\n}\n\n/* Display the hours on the left axis of the schedule\n */\nconst LeftTimeAxis = ({ slotMinTime: min, slotMaxTime: max }: LeftTimeAxis) => {\n  return (\n    <div className=\"left-time-axis\">\n      {getHoursArr(min, max).map((time) => {\n        return (\n          <div key={time} className=\"time-slot\">\n            <span>{`${time}:00`}</span>\n          </div>\n        );\n      })}\n    </div>\n  );\n};\n\ninterface ScheduleHeader {\n  headers: Schedule[\"calendarHeaders\"];\n}\n\nconst tenVH = window.innerHeight / 10;\n\n/*\n  StickyHeader is used to keep the Schedule header sticky to the\n  top of the view port.\n*/\nconst ScheduleHeader = ({ headers }: ScheduleHeader) => {\n  return (\n    <StickyNode top={tenVH}>\n      <div className=\"adjacent schedule-header-row\">\n        {headers.map((header) => {\n          return (\n            <div key={header} className=\"calendar-width calendar-title\">\n              {header}\n            </div>\n          );\n        })}\n      </div>\n    </StickyNode>\n  );\n};\n","import range from \"lodash/range\";\n\n// Returns a list of hours to display on the Schedule\n// TODO: add better types for timing, maybe: https://stackoverflow.com/questions/51445767/how-to-define-a-regex-matched-string-type-in-typescript\nexport const getHoursArr = (min: string, max: string): number[] => {\n  const minHour = parseInt(min.split(\":\")[0]);\n  const maxHour = parseInt(max.split(\":\")[0]);\n  return range(minHour, maxHour);\n};\n","import React, { useContext } from \"react\";\nimport \"./FacultySchedule.scss\";\nimport { Schedule } from \"../../reuseables/Schedule\";\nimport { AppContext } from \"../../../utilities/services/appContext\";\n\n/* Creates a list of Calendars to create the Faculty Schedule\n */\nexport const FacultySchedule = () => {\n  const {\n    appState: { professors },\n  } = useContext(AppContext);\n\n  return (\n    <>\n      <Schedule calendarHeaders={professors} slotMaxTime=\"22:00\" slotMinTime=\"6:00\" />\n    </>\n  );\n};\n","import React, { PropsWithChildren } from \"react\";\n\ninterface AsyncComponent {\n  isLoading: boolean;\n}\n\n/*\n  Show a loading state while waiting on a async function to finish.\n*/\nexport const AsyncComponent = ({ isLoading, children }: PropsWithChildren<AsyncComponent>) => {\n  return <>{isLoading ? <div>parsing csv...</div> : <>{children}</>}</>;\n};\n","/* eslint-disable react/jsx-key */\nimport {\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow as FacultyRow,\n} from \"@material-ui/core\";\nimport React, { useContext, useMemo } from \"react\";\nimport { Column, useTable } from \"react-table\";\nimport { Course, Schedule, Section, Term } from \"../../../utilities/interfaces/dataInterfaces\";\nimport { AppContext } from \"../../../utilities/services/appContext\";\n\ntype hourKeys = \"fallHours\" | \"springHours\" | \"summerHours\" | \"totalHours\" | \"otherHours\";\ntype sectionKeys = \"fallCourseSections\" | \"springCourseSections\" | \"summerCourseSections\";\n\ntype FacultyRow = {\n  [key in hourKeys]?: number;\n} &\n  {\n    [key in sectionKeys]?: string;\n  } & {\n    faculty: string;\n    loadNotes?: string;\n    otherDuties?: string;\n  };\n\ninterface UpdateRowParams {\n  course: Course;\n  newRow: FacultyRow;\n  prevRow: FacultyRow;\n  section: Section;\n  sectionName: string;\n  termName?: \"fall\" | \"spring\" | \"summer\";\n}\n\nconst updateRow = ({\n  course,\n  newRow,\n  prevRow,\n  section,\n  sectionName,\n  termName,\n}: UpdateRowParams) => {\n  const termCourseSectionProp = `${termName}CourseSections` as sectionKeys;\n  const termHoursProp = `${termName}Hours` as hourKeys;\n  if (prevRow) {\n    prevRow[termCourseSectionProp] = prevRow[termCourseSectionProp]\n      ? (prevRow[termCourseSectionProp] = `${prevRow[termCourseSectionProp]}, ${sectionName}`)\n      : (prevRow[termCourseSectionProp] = sectionName);\n\n    prevRow[termHoursProp] = prevRow[termHoursProp]\n      ? (Number(prevRow[termHoursProp]) + (section.facultyHours || course.facultyHours)) /\n        section.instructors.length\n      : (section.facultyHours || course.facultyHours) / section.instructors.length;\n  } else {\n    newRow[termCourseSectionProp] = sectionName;\n    newRow[termHoursProp] =\n      (section.facultyHours || course.facultyHours) / section.instructors.length;\n  }\n};\n\nconst createTable = (schedule: Schedule): FacultyRow[] => {\n  const newTableData: FacultyRow[] = [];\n  schedule.courses.forEach((course) => {\n    course.sections.forEach((section) => {\n      section.instructors.forEach((instructor) => {\n        const sectionName = `${course.prefixes[0]}-${course.number}-${section.letter}`;\n        const newFacultyRow: FacultyRow = {\n          faculty: instructor,\n        };\n        const [prevAddedFacultyRow] = newTableData.filter((data) => {\n          return data.faculty === instructor;\n        });\n        const updateArgs = {\n          course,\n          newRow: newFacultyRow,\n          prevRow: prevAddedFacultyRow,\n          section,\n          sectionName,\n        };\n        switch (section.term) {\n          case Term.Fall:\n            updateRow({ ...updateArgs, termName: \"fall\" });\n            break;\n          case Term.Spring:\n            updateRow({ ...updateArgs, termName: \"spring\" });\n            break;\n          case Term.Summer:\n          case Term.Interim:\n            updateRow({ ...updateArgs, termName: \"summer\" });\n            break;\n          default:\n            // eslint-disable-next-line no-console\n            console.log(`Fell through case statement with value ${section.term}`);\n            break;\n        }\n        if (prevAddedFacultyRow) {\n          newTableData[newTableData.indexOf(prevAddedFacultyRow)] = prevAddedFacultyRow;\n        } else {\n          newTableData.push(newFacultyRow);\n        }\n      });\n    });\n  });\n  return newTableData\n    .map((row) => {\n      return {\n        ...row,\n        totalHours: (row.fallHours || 0) + (row.springHours || 0) + (row.summerHours || 0),\n      };\n    })\n    .sort((a, b) => {\n      return b.totalHours - a.totalHours;\n    });\n};\n\nexport const FacultyLoads = () => {\n  const {\n    appState: { schedule },\n  } = useContext(AppContext);\n\n  const data = useMemo<FacultyRow[]>(() => {\n    return createTable(schedule);\n  }, [schedule]);\n\n  // TODO: Add Other Duties/Hours and Load Notes\n  const columns = useMemo<Column<FacultyRow>[]>(() => {\n    return [\n      { Header: \"Faculty\", accessor: \"faculty\" },\n      { Header: \"Fall Course Sections\", accessor: \"fallCourseSections\" },\n      { Header: \"Fall Hours\", accessor: \"fallHours\" },\n      { Header: \"Spring Course Sections\", accessor: \"springCourseSections\" },\n      { Header: \"Spring Hours\", accessor: \"springHours\" },\n      { Header: \"Summer Course Sections\", accessor: \"summerCourseSections\" },\n      { Header: \"Summer Hours\", accessor: \"summerHours\" },\n      { Header: \"Total Hours\", accessor: \"totalHours\" },\n    ];\n  }, []);\n  const tableInstance = useTable({ columns, data });\n\n  const { getTableProps, getTableBodyProps, headerGroups, rows, prepareRow } = tableInstance;\n\n  // https://react-table.tanstack.com/docs/quick-start\n  return (\n    // apply the table props\n    <TableContainer component={Paper}>\n      <Table {...getTableProps()}>\n        <TableHead>\n          {\n            // Loop over the header rows\n            headerGroups.map((headerGroup) => {\n              return (\n                // Apply the header row props\n                <FacultyRow {...headerGroup.getHeaderGroupProps()}>\n                  {\n                    // Loop over the headers in each row\n                    headerGroup.headers.map((column) => {\n                      return (\n                        // Apply the header cell props\n                        <TableCell {...column.getHeaderProps()}>\n                          {\n                            // Render the header\n                            column.render(\"Header\")\n                          }\n                        </TableCell>\n                      );\n                    })\n                  }\n                </FacultyRow>\n              );\n            })\n          }\n        </TableHead>\n        {/* Apply the table body props */}\n        <TableBody {...getTableBodyProps()}>\n          {\n            // Loop over the table rows\n            rows.map((row) => {\n              // Prepare the row for display\n              prepareRow(row);\n              return (\n                // Apply the row props\n                <FacultyRow {...row.getRowProps()}>\n                  {\n                    // Loop over the rows cells\n                    row.cells.map((cell) => {\n                      // Apply the cell props\n                      return (\n                        <TableCell {...cell.getCellProps()}>\n                          {\n                            // Render the cell contents\n                            cell.render(\"Cell\")\n                          }\n                        </TableCell>\n                      );\n                    })\n                  }\n                </FacultyRow>\n              );\n            })\n          }\n        </TableBody>\n      </Table>\n    </TableContainer>\n  );\n};\n","import { Box, Tabs as MUITabs, Paper, Tab, Typography } from \"@material-ui/core\";\nimport React, { ChangeEvent, PropsWithChildren, useContext, useState } from \"react\";\nimport { FacultySchedule } from \"./FacultySchedule\";\nimport { ScheduleToolbar } from \"../Toolbar/ScheduleToolbar\";\nimport \"./Tabs.scss\";\nimport { AppContext } from \"../../utilities/services/appContext\";\nimport { AddSectionButton } from \"../reuseables/AddSectionButton\";\nimport { AsyncComponent } from \"../reuseables/AsyncComponent\";\nimport { FacultyLoads } from \"./FacultyLoads\";\n\ninterface TabPanelProps {\n  index: number;\n  value: number;\n}\n\nconst TabPanel = (props: PropsWithChildren<TabPanelProps>) => {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      aria-labelledby={`simple-tab-${index}`}\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      role=\"tabpanel\"\n      {...other}\n    >\n      {value === index && (\n        <Box p={3}>\n          <Typography component=\"div\">{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n};\n\nexport const Tabs = () => {\n  const [tabValue, setTabValue] = useState(0);\n  const {\n    appState: { schedule },\n    isLoading,\n  } = useContext(AppContext);\n\n  const handleTabChange = (event: ChangeEvent<{}>, newValue: number) => {\n    setTabValue(newValue);\n  };\n\n  return (\n    <Paper>\n      <AsyncComponent isLoading={isLoading}>\n        <>\n          {schedule.courses.length === 0 ? (\n            <>\n              <h2>No schedule selected. Please import a CSV to start Editing.</h2>\n              <AddSectionButton isIcon={false} />\n            </>\n          ) : (\n            <>\n              <MUITabs\n                centered\n                indicatorColor=\"primary\"\n                onChange={handleTabChange}\n                textColor=\"primary\"\n                value={tabValue}\n              >\n                <Tab label=\"Faculty Schedule\" />\n                <Tab label=\"Room Schedule\" />\n                <Tab label=\"Teaching Loads\" />\n                <Tab label=\"Conflicts\" />\n              </MUITabs>\n              <TabPanel index={0} value={tabValue}>\n                <FacultySchedule />\n              </TabPanel>\n              <TabPanel index={1} value={tabValue}>\n                <ScheduleToolbar />\n              </TabPanel>\n              <TabPanel index={2} value={tabValue}>\n                <FacultyLoads />\n              </TabPanel>\n              <TabPanel index={3} value={tabValue}>\n                Item Four\n              </TabPanel>\n            </>\n          )}\n        </>\n      </AsyncComponent>\n    </Paper>\n  );\n};\n","import forEach from \"lodash/forEach\";\nimport { Schedule } from \"../interfaces/dataInterfaces\";\n\n// Get list of unique professors.\nexport const getProfs = (schedule: Schedule): string[] => {\n  const professorsSet = new Set<string>();\n  forEach(schedule.courses, (course) => {\n    forEach(course.sections, (section) => {\n      forEach(section.instructors, (prof) => {\n        professorsSet.add(prof);\n      });\n    });\n  });\n  return [...professorsSet];\n};\n","import { AppAction, AppState } from \"../interfaces/appInterfaces\";\nimport { getProfs } from \"./facultySchedule\";\n\n/*\n  Provides a function to perform multiple setState updates\n  at once that depend on each other.\n*/\nexport const reducer = (state: AppState, action: AppAction) => {\n  switch (action.type) {\n    case \"setScheduleData\": {\n      const { schedule } = action.payload;\n      return { ...state, professors: getProfs(schedule), schedule };\n    }\n    default:\n      return state;\n  }\n};\n","import React, { useReducer, useState } from \"react\";\nimport { Header } from \"../Header/Header\";\nimport { Tabs } from \"../Tabs\";\nimport \"./App.scss\";\nimport { AppContext } from \"../../utilities/services/appContext\";\nimport { reducer } from \"../../utilities/services/appReducer\";\nimport { initialAppState } from \"../../utilities/interfaces/appInterfaces\";\n\nexport const App = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [appState, appDispatch] = useReducer(reducer, initialAppState);\n\n  return (\n    <div className=\"App\">\n      <AppContext.Provider value={{ appDispatch, appState, isLoading, setIsLoading }}>\n        <Header />\n        <Tabs />\n      </AppContext.Provider>\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\",\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\",\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./components\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./styles/index.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}